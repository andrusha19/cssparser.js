/* parser generated by jison 0.4.17 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var parser = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,4],$V1=[1,5],$V2=[1,21],$V3=[1,22],$V4=[1,23],$V5=[1,30],$V6=[1,27],$V7=[1,33],$V8=[1,31],$V9=[1,19],$Va=[1,32],$Vb=[1,54],$Vc=[1,48],$Vd=[1,46],$Ve=[1,50],$Vf=[1,53],$Vg=[1,52],$Vh=[1,51],$Vi=[1,37],$Vj=[1,38],$Vk=[1,45],$Vl=[1,43],$Vm=[1,44],$Vn=[1,47],$Vo=[5,7,8,20,22,25,34,37,46,49,57,58,64,65,69,73,77,84,85,98,99,102,123,124,131],$Vp=[5,7,8,20,22,25,34,36,37,46,49,57,58,64,65,69,73,77,84,85,98,99,102,123,124,131],$Vq=[1,60],$Vr=[35,52],$Vs=[1,65],$Vt=[1,69],$Vu=[1,88],$Vv=[1,84],$Vw=[1,91],$Vx=[1,92],$Vy=[1,93],$Vz=[1,94],$VA=[1,98],$VB=[1,99],$VC=[1,102],$VD=[35,52,64,65,69,73,77,84,85,93,94,95,96,98,99,102,123,124,131],$VE=[2,138],$VF=[1,110],$VG=[14,35,52,53,64,65,67,69,71,73,77,84,85,93,94,95,96,98,99,102,104,105,106,107,108,109,110,116,122,123,124,126,129,130,131,136],$VH=[14,64,67,73,77],$VI=[1,129],$VJ=[1,133],$VK=[35,64,65,73,77,84,85,126,131],$VL=[64,65,69,73,77,84,85,98,99,102,123,124,131],$VM=[14,35],$VN=[14,35,52],$VO=[1,138],$VP=[1,144],$VQ=[1,145],$VR=[35,65,66],$VS=[35,69],$VT=[1,163],$VU=[1,186],$VV=[1,183],$VW=[1,184],$VX=[1,182],$VY=[5,7,8,20,22,25,34,35,36,37,46,49,57,58,64,65,69,73,77,84,85,98,99,102,123,124,126,131],$VZ=[36,64,65,73,77,84,85,131,132],$V_=[20,22,25,34,36,37,46,49,57,58,64,65,69,73,77,84,85,98,99,102,123,124,131],$V$=[14,35,52,65],$V01=[69,71],$V11=[64,67],$V21=[53,64,65,73,77,84,85,122,124,126,129,130,131],$V31=[14,35,52,53,64,65,69,71,73,77,84,85,93,94,95,96,98,99,102,116,122,123,124,126,129,130,131,136],$V41=[52,71],$V51=[14,52,53,64,65,71,73,77,84,85,116,122,124,126,129,130,131,136],$V61=[14,52,53,64,65,71,73,77,84,85,104,116,122,124,126,129,130,131,136],$V71=[14,52,53,64,65,71,73,77,84,85,95,99,104,116,122,124,126,129,130,131,132,136,139],$V81=[35,36,64,65,73,77,84,85,126,131],$V91=[71,104],$Va1=[71,95,99,132,139],$Vb1=[14,52,116],$Vc1=[126,129,130];
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"stylesheet":3,"stylesheet_list":4,"EOF":5,"stylesheet_component":6,"CDO":7,"CDC":8,"qualified_rule":9,"at_rule":10,"rule_list":11,"rule_list_component":12,"at_rule_simple":13,"SEMICOLON":14,"at_rule_nested":15,"at_rule_font_face":16,"at_rule_charset":17,"at_rule_import":18,"at_rule_namespace":19,"AT_CHARSET":20,"StringVal":21,"AT_IMPORT":22,"UrlOrStringVal":23,"media_query_list":24,"AT_NAMESPACE":25,"IDENT":26,"at_rule_nested_frontpart":27,"rule_block":28,"at_rule_keyframes":29,"at_rule_page":30,"at_rule_media":31,"at_rule_document":32,"at_rule_supports":33,"AT_MEDIA":34,"LEFT_CURLY_BRACKET":35,"RIGHT_CURLY_BRACKET":36,"AT_KEYFRAMES":37,"keyframes_name":38,"keyframes_block":39,"keyframes_block_list":40,"keyframes_selector":41,"css_declarations":42,"IdentVal":43,"PercentageVal":44,"at_rule_page_frontpart":45,"AT_PAGE":46,"PseudoClassList":47,"PseudoClass":48,"AT_DOCUMENT":49,"AtDocumentFuncValList":50,"AtDocumentFuncVal":51,"COMMA":52,"URL_FUNC":53,"URL_PREFIX_FUNC":54,"DOMAIN_FUNC":55,"REGEXP_FUNC":56,"AT_FONT_FACE":57,"AT_SUPPORTS":58,"supports_expression_list":59,"supports_expression":60,"supports_and_or_expression":61,"OperatorAndOr":62,"supports_expression_body":63,"OPERATOR_NOT":64,"OPERATOR_AND":65,"OPERATOR_OR":66,"LEFT_PARENTHESIS":67,"ComponentName":68,"COLON":69,"DeclarationPropValList":70,"RIGHT_PARENTHESIS":71,"media_query":72,"MEDIA_TYPE":73,"media_query_and_expression_list":74,"OPERATOR_ONLY_NOT":75,"media_query_expression_list":76,"OPERATOR_ONLY":77,"media_query_expression":78,"media_query_and_expression":79,"MediaFeature":80,"GenericVal":81,"VendorPrefix":82,"MediaFeatureBody":83,"MEDIA_FEATURE_PREFIX":84,"MEDIA_FEATURE":85,"css_rule":86,"SelectorList":87,"declaration_list":88,"SelectorGroupVal":89,"SelectorGroup":90,"Selector":91,"SelectorCombinator":92,"WHITESPACE":93,"GREATER_THAN_SIGN":94,"PLUS_SIGN":95,"TILDE":96,"HashVal":97,"FULL_STOP":98,"ASTERISK":99,"AttrSelector":100,"PseudoElement":101,"LEFT_SQUARE_BRACKET":102,"AttrSelectorOperator":103,"RIGHT_SQUARE_BRACKET":104,"INCLUDE_MATCH":105,"DASH_MATCH":106,"PREFIX_MATCH":107,"SUFFIX_MATCH":108,"SUBSTRING_MATCH":109,"ASSIGN_MARK":110,"FuncVal":111,"declaration":112,"declaration_part":113,"DeclarationPropName":114,"DeclarationPropValLists":115,"IMPORTANT":116,"DeclarationPropVals":117,"DeclarationPropVal":118,"UrlVal":119,"NumericVal":120,"CalcFuncVal":121,"STRING":122,"NUMBER_SIGN":123,"HEXA_NUMBER":124,"HexaNumericVal":125,"PERCENTAGE":126,"IdOrUrlOrStringVal":127,"GenericNumericVal":128,"NUMBER":129,"DIMENSION":130,"GENERAL_IDENT":131,"HYPHEN_MINUS":132,"VENDOR_PREFIX":133,"FUNCTION":134,"FuncParams":135,"CALC_FUNC":136,"CalcExpr":137,"CalcOperator":138,"SOLIDUS":139,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",7:"CDO",8:"CDC",14:"SEMICOLON",20:"AT_CHARSET",22:"AT_IMPORT",25:"AT_NAMESPACE",34:"AT_MEDIA",35:"LEFT_CURLY_BRACKET",36:"RIGHT_CURLY_BRACKET",37:"AT_KEYFRAMES",46:"AT_PAGE",49:"AT_DOCUMENT",52:"COMMA",53:"URL_FUNC",54:"URL_PREFIX_FUNC",55:"DOMAIN_FUNC",56:"REGEXP_FUNC",57:"AT_FONT_FACE",58:"AT_SUPPORTS",64:"OPERATOR_NOT",65:"OPERATOR_AND",66:"OPERATOR_OR",67:"LEFT_PARENTHESIS",69:"COLON",71:"RIGHT_PARENTHESIS",73:"MEDIA_TYPE",77:"OPERATOR_ONLY",84:"MEDIA_FEATURE_PREFIX",85:"MEDIA_FEATURE",93:"WHITESPACE",94:"GREATER_THAN_SIGN",95:"PLUS_SIGN",96:"TILDE",98:"FULL_STOP",99:"ASTERISK",102:"LEFT_SQUARE_BRACKET",104:"RIGHT_SQUARE_BRACKET",105:"INCLUDE_MATCH",106:"DASH_MATCH",107:"PREFIX_MATCH",108:"SUFFIX_MATCH",109:"SUBSTRING_MATCH",110:"ASSIGN_MARK",116:"IMPORTANT",122:"STRING",123:"NUMBER_SIGN",124:"HEXA_NUMBER",126:"PERCENTAGE",129:"NUMBER",130:"DIMENSION",131:"GENERAL_IDENT",132:"HYPHEN_MINUS",133:"VENDOR_PREFIX",136:"CALC_FUNC",139:"SOLIDUS"},
productions_: [0,[3,2],[4,1],[4,2],[6,1],[6,1],[6,1],[6,1],[11,1],[11,2],[12,1],[12,1],[10,2],[10,1],[10,1],[13,1],[13,1],[13,1],[17,2],[18,2],[18,3],[19,2],[19,3],[15,2],[15,1],[15,1],[27,1],[27,1],[27,1],[31,2],[28,3],[28,2],[29,3],[39,2],[39,3],[39,2],[40,1],[40,2],[38,1],[38,1],[41,1],[41,1],[30,2],[45,1],[45,2],[47,1],[47,2],[32,2],[50,1],[50,3],[51,1],[51,1],[51,1],[51,1],[16,2],[33,2],[59,1],[59,2],[61,2],[60,1],[60,2],[62,1],[62,1],[63,5],[24,1],[24,3],[72,1],[72,2],[72,2],[72,3],[72,1],[75,1],[75,1],[76,2],[76,1],[74,2],[74,1],[79,2],[78,3],[78,5],[80,2],[80,1],[83,2],[83,1],[9,1],[86,2],[42,3],[42,2],[87,1],[87,3],[89,1],[90,1],[90,2],[90,3],[92,1],[92,1],[92,1],[92,1],[91,1],[91,1],[91,2],[91,1],[91,1],[91,1],[91,1],[100,5],[103,1],[103,1],[103,1],[103,1],[103,1],[103,1],[101,3],[101,4],[48,2],[48,3],[48,2],[48,3],[88,1],[88,2],[112,2],[113,4],[113,3],[115,1],[115,3],[70,1],[117,1],[117,2],[118,1],[118,1],[118,1],[118,1],[118,1],[118,1],[114,1],[114,2],[21,1],[119,1],[43,1],[97,2],[97,1],[125,1],[44,1],[23,1],[23,1],[127,1],[127,1],[127,1],[128,1],[128,1],[128,1],[120,1],[120,1],[81,1],[81,1],[26,1],[26,1],[26,1],[26,1],[26,1],[26,2],[68,2],[68,1],[82,2],[111,2],[111,3],[134,2],[135,1],[135,3],[121,2],[121,3],[137,1],[137,3],[138,1],[138,1],[138,1],[138,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:

      this.$ = $$[$0-1]

      return this.$
    
break;
case 2:

      this.$ = []
      if ($$[$0])
        this.$.push($$[$0])
    
break;
case 3:

      if ($$[$0-1] == null) {
        this.$ = $$[$0]
        return
      }

      this.$ = [$$[$0-1]].concat($$[$0])
    
break;
case 4: case 5: case 6: case 7: case 10: case 11: case 74: case 76: case 81: case 84: case 91: case 126: case 167:
this.$ = $$[$0];
break;
case 8: case 64: case 118:
this.$ = [$$[$0]];
break;
case 9:
this.$ = [$$[$0-1]].concat($$[$0]);
break;
case 18: case 19: case 21:
this.$ = atRule($$[$0-1], $$[$0]);
break;
case 20:
this.$ = atRule($$[$0-2], $$[$0-1], 'mediaQueries', $$[$0]);
break;
case 22:
this.$ = atRule($$[$0-2], $$[$0], 'prefix', $$[$0-1]);
break;
case 23:
this.$ = addProp($$[$0-1], 'nestedRules', $$[$0]);
break;
case 29:
this.$ = atRule($$[$0-1], null, 'mediaQueries', $$[$0]);
break;
case 30: case 34: case 86: case 120: case 166:
this.$ = $$[$0-1];
break;
case 31: case 33:
this.$ = null;
break;
case 32:
this.$ = atRule($$[$0-2], $$[$0], 'name', $$[$0-1]);
break;
case 35:
this.$ = { type: 'KEYFRAMES_BLOCK', selector: $$[$0-1], declarations: $$[$0] };
break;
case 37: case 57: case 73: case 75: case 92: case 127:
this.$ = merge($$[$0-1], $$[$0]);
break;
case 42:
this.$ = addProp($$[$0-1], 'declarations', $$[$0]);
break;
case 43:
this.$ = atRule($$[$0], null);
break;
case 44:
this.$ = atRule($$[$0-1], null, 'pseudoClasses', $$[$0]);
break;
case 45:
this.$ = [{type: 'PSEUDO_CLASS', value: $$[$0]}];
break;
case 46:
this.$ = merge($$[$0-1], {type: 'PSEUDO_CLASS', value: $$[$0]});
break;
case 47:
this.$ = atRule($$[$0-1], null, 'functions', $$[$0]);
break;
case 49: case 89: case 124: case 168:
this.$ = merge($$[$0-2], $$[$0]);
break;
case 50:
this.$ = { type: "FUNCTION", name: "url", value: $$[$0] };
break;
case 51:
this.$ = { type: "FUNCTION", name: "url-prefix", value: $$[$0] };
break;
case 52:
this.$ = { type: "FUNCTION", name: "domain", value: $$[$0] };
break;
case 53:
this.$ = { type: "FUNCTION", name: "regexp", value: $$[$0] };
break;
case 54:
this.$ = { type: FONT_FACE, declarations: $$[$0] };
break;
case 55:
this.$ = atRule($$[$0-1], null, 'expressions', $$[$0]);
break;
case 58:
this.$ = { operator: $$[$0-1], expression: $$[$0] };
break;
case 59:
this.$ = { value: $$[$0] };
break;
case 60:
this.$ = { value: $$[$0], not: true };
break;
case 63:
this.$ = { property: $$[$0-3], value: $$[$0-1] };
break;
case 65:
this.$ = $$[$0].concat([$$[$0-2]]);
break;
case 66:
this.$ = mediaQuery(null, $$[$0]);
break;
case 67:
this.$ = mediaQuery(null, $$[$0-1], $$[$0]);
break;
case 68:
this.$ = mediaQuery($$[$0-1], $$[$0]);
break;
case 69:
this.$ = mediaQuery($$[$0-2], $$[$0-1], $$[$0]);
break;
case 70:
this.$ = mediaQuery(null, null, $$[$0]);
break;
case 77:
this.$ = addProp($$[$0], 'operator', $$[$0-1]);
break;
case 78:
this.$ = mediaQueryExpr($$[$0-1]);
break;
case 79:
this.$ = mediaQueryExpr($$[$0-3], $$[$0-1]);
break;
case 80:

      this.$ = addProp($$[$0], 'vendorPrefix', $$[$0-1])
      this.$.fullQuailfiedName = $$[$0-1] + this.$.fullQuailfiedName
    
break;
case 82: case 161:
this.$ = { name: $$[$0], prefix: $$[$0-1], fullQuailfiedName: $$[$0-1] + $$[$0] };
break;
case 83: case 162:
this.$ = { name: $$[$0], fullQuailfiedName: $$[$0] };
break;
case 85:
this.$ = { type: CSS_RULE, selectors: $$[$0-1], declarations: $$[$0] };
break;
case 87:
this.$ = [];
break;
case 90:
this.$ = defVariable(SELECTOR, $$[$0]);
break;
case 93:
this.$ = merge($$[$0-2], [$$[$0-1], $$[$0]]);
break;
case 94:
this.$ = selectorCombinator("DESCENDANT", $$[$0]);
break;
case 95:
this.$ = selectorCombinator("CHILD", $$[$0]);
break;
case 96:
this.$ = selectorCombinator("ADJACENT_SIBLING", $$[$0]);
break;
case 97:
this.$ = selectorCombinator("GENERAL_SIBLING", $$[$0]);
break;
case 98:
this.$ = selectorComponent(TYPE_SELECTOR, $$[$0].value);
break;
case 99:
this.$ = selectorComponent(ID_SELECTOR, $$[$0].value);
break;
case 100:
this.$ = selectorComponent(CLASS_SELECTOR, $$[$0-1] + $$[$0]);
break;
case 101:
this.$ = selectorComponent(UNIVERSAL_SELECTOR, $$[$0]);
break;
case 102:
this.$ = selectorComponent(ATTR_SELECTOR, $$[$0]);
break;
case 103:
this.$ = selectorComponent(PSEUDO_CLASS, $$[$0]);
break;
case 104:
this.$ = selectorComponent(PSEUDO_ELEMENT, $$[$0]);
break;
case 105:

      this.$ = {
        attribute: $$[$0-3],
        operator: $$[$0-2],
        value: $$[$0-1]
      }
    
break;
case 106:
this.$ = defVariable('include', $$[$0]);
break;
case 107:
this.$ = defVariable('dash', $$[$0]);
break;
case 108:
this.$ = defVariable('prefix', $$[$0]);
break;
case 109:
this.$ = defVariable('suffix', $$[$0]);
break;
case 110:
this.$ = defVariable('substring', $$[$0]);
break;
case 111:
this.$ = defVariable('equal', $$[$0]);
break;
case 112:
this.$ = { fullQuailfiedName: $$[$0-2] + $$[$0-1] + $$[$0], name: $$[$0] };
break;
case 113:
this.$ = { fullQuailfiedName: $$[$0-3] + $$[$0-2] + $$[$0-1] + $$[$0], vendorPrefix: $$[$0-1], name: $$[$0] };
break;
case 114: case 116:
this.$ = { fullQuailfiedName: $$[$0-1] + $$[$0], name: $$[$0] };
break;
case 115: case 117:
this.$ = { fullQuailfiedName: $$[$0-2] + $$[$0-1] + $$[$0], vendorPrefix: $$[$0-1], name: $$[$0] };
break;
case 119:
this.$ = $$[$0-1].concat([$$[$0]]);
break;
case 121:
this.$ = cssDeclaration($$[$0-3], $$[$0-1], $$[$0]);
break;
case 122:
this.$ = cssDeclaration($$[$0-2], $$[$0]);
break;
case 125:
this.$ = multiDimesionsVal($$[$0]);
break;
case 134:
this.$ =  { name: $$[$0], fullQuailfiedName: $$[$0] };
break;
case 135:
this.$ =  { vendorPrefix: $$[$0-1], name: $$[$0], fullQuailfiedName: $$[$0-1] + $$[$0] };
break;
case 136:
this.$ = { type: 'STRING', value: $$[$0] };
break;
case 137:
this.$ = { type: 'URL', value: $$[$0] };
break;
case 138:
this.$ = { type: 'ID', value: $$[$0] };
break;
case 139:
this.$ = { type: 'HASH', value: $$[$0-1] + $$[$0] };
break;
case 140:
this.$ = { type: 'HASH', value: $$[$0] };
break;
case 141:
this.$ = { type: 'HEXA_NUMBER', value: $$[$0]};
break;
case 142:
this.$ = { type: 'PERCENTAGE', value: $$[$0] };
break;
case 148:
this.$ = { type: 'NUMBER', value: $$[$0] };
break;
case 149:
this.$ = { type: 'DIMENSION', value: $$[$0] };
break;
case 160: case 163:
this.$ = $$[$0-1] + $$[$0];
break;
case 164:
this.$ = { type: "FUNCTION", name: $$[$0-1] };
break;
case 165:
this.$ = { type: "FUNCTION", name: $$[$0-2], parameters: $$[$0-1] };
break;
case 169:
this.$ = { type: "FUNCTION", name: 'calc' };
break;
case 170:
this.$ = { type: "FUNCTION", name: 'calc', expressions: $$[$0-1] };
break;
case 172:

      this.$ = {
        type: CALC_EXPRESSION,
        leftHandSide: $$[$0-2],
        operator: $$[$0-1],
        rightHandSide: $$[$0]
      }
    
break;
}
},
table: [{3:1,4:2,6:3,7:$V0,8:$V1,9:6,10:7,13:9,15:10,16:11,17:13,18:14,19:15,20:$V2,22:$V3,25:$V4,26:42,27:16,29:17,30:18,31:24,32:25,33:26,34:$V5,37:$V6,43:35,45:28,46:$V7,48:40,49:$V8,57:$V9,58:$Va,64:$Vb,65:$Vc,69:$Vd,73:$Ve,75:49,77:$Vf,84:$Vg,85:$Vh,86:8,87:12,89:20,90:29,91:34,97:36,98:$Vi,99:$Vj,100:39,101:41,102:$Vk,123:$Vl,124:$Vm,131:$Vn},{1:[3]},{5:[1,55]},{4:56,5:[2,2],6:3,7:$V0,8:$V1,9:6,10:7,13:9,15:10,16:11,17:13,18:14,19:15,20:$V2,22:$V3,25:$V4,26:42,27:16,29:17,30:18,31:24,32:25,33:26,34:$V5,37:$V6,43:35,45:28,46:$V7,48:40,49:$V8,57:$V9,58:$Va,64:$Vb,65:$Vc,69:$Vd,73:$Ve,75:49,77:$Vf,84:$Vg,85:$Vh,86:8,87:12,89:20,90:29,91:34,97:36,98:$Vi,99:$Vj,100:39,101:41,102:$Vk,123:$Vl,124:$Vm,131:$Vn},o($Vo,[2,4]),o($Vo,[2,5]),o($Vo,[2,6]),o($Vo,[2,7]),o($Vp,[2,84]),{14:[1,57]},o($Vp,[2,13]),o($Vp,[2,14]),{35:$Vq,42:58,52:[1,59]},{14:[2,15]},{14:[2,16]},{14:[2,17]},{28:61,35:[1,62]},o($Vp,[2,24]),o($Vp,[2,25]),{35:$Vq,42:63},o($Vr,[2,88]),{21:64,122:$Vs},{21:67,23:66,53:$Vt,119:68,122:$Vs},{21:67,23:70,26:71,53:$Vt,64:$Vb,65:$Vc,73:$Ve,75:49,77:$Vf,84:$Vg,85:$Vh,119:68,122:$Vs,131:$Vn},{35:[2,26]},{35:[2,27]},{35:[2,28]},{21:74,26:42,38:72,43:73,64:$Vb,65:$Vc,73:$Ve,75:49,77:$Vf,84:$Vg,85:$Vh,122:$Vs,131:$Vn},{35:$Vq,42:75},o($Vr,[2,90],{43:35,97:36,100:39,48:40,101:41,26:42,75:49,91:76,92:77,64:$Vb,65:$Vc,69:$Vd,73:$Ve,77:$Vf,84:$Vg,85:$Vh,93:[1,78],94:[1,79],95:[1,80],96:[1,81],98:$Vi,99:$Vj,102:$Vk,123:$Vl,124:$Vm,131:$Vn}),{24:82,64:$Vb,67:$Vu,72:83,73:$Vv,75:85,76:86,77:$Vf,78:87},{50:89,51:90,53:$Vw,54:$Vx,55:$Vy,56:$Vz},{59:95,60:96,63:97,64:$VA,67:$VB},{35:[2,43],47:100,48:101,69:$VC},o($VD,[2,91]),o($VD,[2,98]),o($VD,[2,99]),{26:103,64:$Vb,65:$Vc,73:$Ve,75:49,77:$Vf,84:$Vg,85:$Vh,131:$Vn},o($VD,[2,101]),o($VD,[2,102]),o($VD,[2,103]),o($VD,[2,104]),o([35,52,64,65,69,71,73,77,84,85,93,94,95,96,98,99,102,104,123,124,126,131],$VE),{26:104,64:$Vb,65:$Vc,73:$Ve,75:49,77:$Vf,84:$Vg,85:$Vh,131:$Vn},o($VD,[2,140]),{26:105,64:$Vb,65:$Vc,73:$Ve,75:49,77:$Vf,84:$Vg,85:$Vh,131:$Vn},{26:106,64:$Vb,65:$Vc,69:[1,109],73:$Ve,75:49,77:$Vf,82:107,84:$Vg,85:$Vh,111:108,131:$Vn,132:$VF,134:111},o($VG,[2,155]),o($VG,[2,156]),o($VG,[2,157]),o($VG,[2,158]),o($VG,[2,159]),{85:[1,112]},o($VG,[2,71]),o($VG,[2,72]),{1:[2,1]},{5:[2,3]},o($Vp,[2,12]),o($Vp,[2,85]),{26:42,43:35,48:40,64:$Vb,65:$Vc,69:$Vd,73:$Ve,75:49,77:$Vf,84:$Vg,85:$Vh,89:113,90:29,91:34,97:36,98:$Vi,99:$Vj,100:39,101:41,102:$Vk,123:$Vl,124:$Vm,131:$Vn},{26:119,36:[1,115],64:$Vb,65:$Vc,73:$Ve,75:49,77:$Vf,82:120,84:$Vg,85:$Vh,88:114,112:116,113:117,114:118,131:$Vn,132:$VF},o($Vp,[2,23]),{9:124,10:125,11:121,12:123,13:9,15:10,16:11,17:13,18:14,19:15,20:$V2,22:$V3,25:$V4,26:42,27:16,29:17,30:18,31:24,32:25,33:26,34:$V5,36:[1,122],37:$V6,43:35,45:28,46:$V7,48:40,49:$V8,57:$V9,58:$Va,64:$Vb,65:$Vc,69:$Vd,73:$Ve,75:49,77:$Vf,84:$Vg,85:$Vh,86:8,87:12,89:20,90:29,91:34,97:36,98:$Vi,99:$Vj,100:39,101:41,102:$Vk,123:$Vl,124:$Vm,131:$Vn},o($Vp,[2,54]),{14:[2,18]},o([14,35,52,53,64,65,67,71,73,77,84,85,104,116,122,124,126,129,130,131,136],[2,136]),{14:[2,19],24:126,64:$Vb,67:$Vu,72:83,73:$Vv,75:85,76:86,77:$Vf,78:87},o($VH,[2,143]),o($VH,[2,144]),o([14,52,53,64,65,67,71,73,77,84,85,104,116,122,124,126,129,130,131,136],[2,137]),{14:[2,21]},{21:67,23:127,53:$Vt,119:68,122:$Vs},{26:42,35:$VI,39:128,41:130,43:131,44:132,64:$Vb,65:$Vc,73:$Ve,75:49,77:$Vf,84:$Vg,85:$Vh,126:$VJ,131:$Vn},o($VK,[2,38]),o($VK,[2,39]),o($Vp,[2,42]),o($VD,[2,92]),{26:42,43:35,48:40,64:$Vb,65:$Vc,69:$Vd,73:$Ve,75:49,77:$Vf,84:$Vg,85:$Vh,91:134,97:36,98:$Vi,99:$Vj,100:39,101:41,102:$Vk,123:$Vl,124:$Vm,131:$Vn},o($VL,[2,94]),o($VL,[2,95]),o($VL,[2,96]),o($VL,[2,97]),{35:[2,29]},o($VM,[2,64],{52:[1,135]}),o($VN,[2,66],{74:136,79:137,65:$VO}),{73:[1,139]},o($VN,[2,70]),o($VN,[2,74],{79:137,74:140,65:$VO}),{80:141,82:142,83:143,84:$VP,85:$VQ,132:$VF},{35:[2,47],52:[1,146]},o($Vr,[2,48]),o($Vr,[2,50]),o($Vr,[2,51]),o($Vr,[2,52]),o($Vr,[2,53]),{35:[2,55],61:147,62:148,65:[1,149],66:[1,150]},o($VR,[2,56]),o($VR,[2,59]),{63:151,67:$VB},{26:154,64:$Vb,65:$Vc,68:152,73:$Ve,75:49,77:$Vf,82:153,84:$Vg,85:$Vh,131:$Vn,132:$VF},{35:[2,44],48:155,69:$VC},o($VS,[2,45]),{26:106,64:$Vb,65:$Vc,73:$Ve,75:49,77:$Vf,82:107,84:$Vg,85:$Vh,111:108,131:$Vn,132:$VF,134:111},o($VD,[2,100]),o($VD,[2,139]),{103:156,105:[1,157],106:[1,158],107:[1,159],108:[1,160],109:[1,161],110:[1,162]},o($VD,[2,114],{67:$VT}),{26:164,64:$Vb,65:$Vc,73:$Ve,75:49,77:$Vf,84:$Vg,85:$Vh,111:165,131:$Vn,134:111},o($VD,[2,116]),{26:166,64:$Vb,65:$Vc,73:$Ve,75:49,77:$Vf,82:167,84:$Vg,85:$Vh,131:$Vn,132:$VF},{133:[1,168]},{21:173,26:179,43:175,44:185,53:$Vt,64:$Vb,65:$Vc,71:[1,169],73:$Ve,75:49,77:$Vf,84:$Vg,85:$Vh,111:176,117:171,118:172,119:174,120:177,121:178,122:$Vs,124:$VU,125:181,126:$VJ,128:180,129:$VV,130:$VW,131:$Vn,134:111,135:170,136:$VX},o($VG,[2,160]),o($Vr,[2,89]),{26:119,36:[1,187],64:$Vb,65:$Vc,73:$Ve,75:49,77:$Vf,82:120,84:$Vg,85:$Vh,112:188,113:117,114:118,131:$Vn,132:$VF},o($VY,[2,87]),o($VZ,[2,118]),{14:[1,189]},{69:[1,190]},{69:[2,134]},{26:191,64:$Vb,65:$Vc,73:$Ve,75:49,77:$Vf,84:$Vg,85:$Vh,131:$Vn},{36:[1,192]},o($Vp,[2,31]),{9:124,10:125,11:193,12:123,13:9,15:10,16:11,17:13,18:14,19:15,20:$V2,22:$V3,25:$V4,26:42,27:16,29:17,30:18,31:24,32:25,33:26,34:$V5,36:[2,8],37:$V6,43:35,45:28,46:$V7,48:40,49:$V8,57:$V9,58:$Va,64:$Vb,65:$Vc,69:$Vd,73:$Ve,75:49,77:$Vf,84:$Vg,85:$Vh,86:8,87:12,89:20,90:29,91:34,97:36,98:$Vi,99:$Vj,100:39,101:41,102:$Vk,123:$Vl,124:$Vm,131:$Vn},o($V_,[2,10]),o($V_,[2,11]),{14:[2,20]},{14:[2,22]},o($Vp,[2,32]),{26:42,35:$VI,36:[1,194],39:196,40:195,41:130,43:131,44:132,64:$Vb,65:$Vc,73:$Ve,75:49,77:$Vf,84:$Vg,85:$Vh,126:$VJ,131:$Vn},{35:$Vq,42:197},{35:[2,40]},{35:[2,41]},o([14,35,52,53,64,65,71,73,77,84,85,95,99,104,116,122,124,126,129,130,131,132,136,139],[2,142]),o($VD,[2,93]),{24:198,64:$Vb,67:$Vu,72:83,73:$Vv,75:85,76:86,77:$Vf,78:87},o($VN,[2,67],{79:199,65:$VO}),o($V$,[2,76]),{67:$Vu,78:200},o($VN,[2,68],{79:137,74:201,65:$VO}),o($VN,[2,73],{79:199,65:$VO}),{69:[1,203],71:[1,202]},{83:204,84:$VP,85:$VQ},o($V01,[2,81]),{85:[1,205]},o($V01,[2,83]),{51:206,53:$Vw,54:$Vx,55:$Vy,56:$Vz},o($VR,[2,57]),{60:207,63:97,64:$VA,67:$VB},o($V11,[2,61]),o($V11,[2,62]),o($VR,[2,60]),{69:[1,208]},{26:209,64:$Vb,65:$Vc,73:$Ve,75:49,77:$Vf,84:$Vg,85:$Vh,131:$Vn},{69:[2,162]},o($VS,[2,46]),{21:213,26:42,43:215,44:185,53:$Vt,64:$Vb,65:$Vc,73:$Ve,75:49,77:$Vf,81:210,84:$Vg,85:$Vh,119:214,120:212,122:$Vs,124:$VU,125:181,126:$VJ,127:211,128:180,129:$VV,130:$VW,131:$Vn},o($V21,[2,106]),o($V21,[2,107]),o($V21,[2,108]),o($V21,[2,109]),o($V21,[2,110]),o($V21,[2,111]),o([53,64,65,71,73,77,84,85,122,124,126,129,130,131,136],[2,166]),o($VD,[2,115],{67:$VT}),o($VD,[2,117]),o($VD,[2,112]),{26:216,64:$Vb,65:$Vc,73:$Ve,75:49,77:$Vf,84:$Vg,85:$Vh,131:$Vn},o([64,65,73,77,84,85,131],[2,163]),o($V31,[2,164]),{52:[1,218],71:[1,217]},o($V41,[2,167],{75:49,134:111,21:173,119:174,43:175,111:176,120:177,121:178,26:179,128:180,125:181,44:185,118:219,53:$Vt,64:$Vb,65:$Vc,73:$Ve,77:$Vf,84:$Vg,85:$Vh,122:$Vs,124:$VU,126:$VJ,129:$VV,130:$VW,131:$Vn,136:$VX}),o($V51,[2,126]),o($V51,[2,128]),o($V51,[2,129]),o($V51,[2,130]),o($V51,[2,131]),o($V51,[2,132]),o($V51,[2,133]),o($V51,$VE,{67:$VT}),o($V61,[2,151]),o($V61,[2,152]),{44:185,71:[1,220],126:$VJ,128:222,129:$VV,130:$VW,137:221},o($V71,[2,148]),o($V71,[2,149]),o($V71,[2,150]),o($V61,[2,141]),o($VY,[2,86]),o($VZ,[2,119]),o($VZ,[2,120]),{21:173,26:179,43:175,44:185,53:$Vt,64:$Vb,65:$Vc,70:224,73:$Ve,75:49,77:$Vf,84:$Vg,85:$Vh,111:176,115:223,117:225,118:172,119:174,120:177,121:178,122:$Vs,124:$VU,125:181,126:$VJ,128:180,129:$VV,130:$VW,131:$Vn,134:111,136:$VX},{69:[2,135]},o($Vp,[2,30]),{36:[2,9]},o($VY,[2,33]),{26:42,35:$VI,36:[1,226],39:227,41:130,43:131,44:132,64:$Vb,65:$Vc,73:$Ve,75:49,77:$Vf,84:$Vg,85:$Vh,126:$VJ,131:$Vn},o($V81,[2,36]),o($VY,[2,35]),o($VM,[2,65]),o($V$,[2,75]),o($V$,[2,77]),o($VN,[2,69],{79:199,65:$VO}),o($V$,[2,78]),{21:213,26:42,43:215,44:185,53:$Vt,64:$Vb,65:$Vc,73:$Ve,75:49,77:$Vf,81:228,84:$Vg,85:$Vh,119:214,120:212,122:$Vs,124:$VU,125:181,126:$VJ,127:211,128:180,129:$VV,130:$VW,131:$Vn},o($V01,[2,80]),o($V01,[2,82]),o($Vr,[2,49]),o($VR,[2,58]),{21:173,26:179,43:175,44:185,53:$Vt,64:$Vb,65:$Vc,70:229,73:$Ve,75:49,77:$Vf,84:$Vg,85:$Vh,111:176,117:225,118:172,119:174,120:177,121:178,122:$Vs,124:$VU,125:181,126:$VJ,128:180,129:$VV,130:$VW,131:$Vn,134:111,136:$VX},{69:[2,161]},{104:[1,230]},o($V91,[2,153]),o($V91,[2,154]),o($V91,[2,145]),o($V91,[2,146]),o($V91,[2,147]),o($VD,[2,113]),o($V31,[2,165]),{21:173,26:179,43:175,44:185,53:$Vt,64:$Vb,65:$Vc,73:$Ve,75:49,77:$Vf,84:$Vg,85:$Vh,111:176,117:231,118:172,119:174,120:177,121:178,122:$Vs,124:$VU,125:181,126:$VJ,128:180,129:$VV,130:$VW,131:$Vn,134:111,136:$VX},o($V51,[2,127]),o($V51,[2,169]),{71:[1,232],95:[1,235],99:[1,234],132:[1,236],138:233,139:[1,237]},o($Va1,[2,171]),{14:[2,122],52:[1,239],116:[1,238]},o($Vb1,[2,123]),o([14,52,71,116],[2,125],{75:49,134:111,21:173,119:174,43:175,111:176,120:177,121:178,26:179,128:180,125:181,44:185,118:219,53:$Vt,64:$Vb,65:$Vc,73:$Ve,77:$Vf,84:$Vg,85:$Vh,122:$Vs,124:$VU,126:$VJ,129:$VV,130:$VW,131:$Vn,136:$VX}),o($VY,[2,34]),o($V81,[2,37]),{71:[1,240]},{71:[1,241]},o($VD,[2,105]),o($V41,[2,168],{75:49,134:111,21:173,119:174,43:175,111:176,120:177,121:178,26:179,128:180,125:181,44:185,118:219,53:$Vt,64:$Vb,65:$Vc,73:$Ve,77:$Vf,84:$Vg,85:$Vh,122:$Vs,124:$VU,126:$VJ,129:$VV,130:$VW,131:$Vn,136:$VX}),o($V51,[2,170]),{44:185,126:$VJ,128:242,129:$VV,130:$VW},o($Vc1,[2,173]),o($Vc1,[2,174]),o($Vc1,[2,175]),o($Vc1,[2,176]),{14:[2,121]},{21:173,26:179,43:175,44:185,53:$Vt,64:$Vb,65:$Vc,70:243,73:$Ve,75:49,77:$Vf,84:$Vg,85:$Vh,111:176,117:225,118:172,119:174,120:177,121:178,122:$Vs,124:$VU,125:181,126:$VJ,128:180,129:$VV,130:$VW,131:$Vn,134:111,136:$VX},o($V$,[2,79]),o($VR,[2,63]),o($Va1,[2,172]),o($Vb1,[2,124])],
defaultActions: {13:[2,15],14:[2,16],15:[2,17],24:[2,26],25:[2,27],26:[2,28],55:[2,1],56:[2,3],64:[2,18],70:[2,21],82:[2,29],119:[2,134],126:[2,20],127:[2,22],131:[2,40],132:[2,41],154:[2,162],191:[2,135],193:[2,9],209:[2,161],238:[2,121]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        function _parseError (msg, hash) {
            this.message = msg;
            this.hash = hash;
        }
        _parseError.prototype = Error;

        throw new _parseError(str, hash);
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

  const
    AT_RULE = "AT_RULE",
    MEDIA_QUERY = "MEDIA_QUERY",
    MEDIA_QUERY_EXPR = "MEDIA_QUERY_EXPR",

    FONT_FACE = "FONT_FACE",

    /*
     * Ref: [1] https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Selectors 
     */
    SELECTOR = "SELECTOR",
    SELECTOR_COMBINATOR = "SELECTOR_COMBINATOR",

      TYPE_SELECTOR = "ID_SELECTOR",
      CLASS_SELECTOR = "CLASS_SELECTOR",
      ID_SELECTOR = "ID_SELECTOR",
      UNIVERSAL_SELECTOR = "UNIVERSAL_SELECTOR",
      ATTR_SELECTOR = "ATTR_SELECTOR",
      ATTR_OPERATOR = "ATTR_OPERATOR",
      PSEUDO_CLASS = "PSEUDO_CLASS",
      PSEUDO_ELEMENT = "PSEUDO_ELEMENT",

    CSS_RULE = "CSS_RULE",
    CSS_DECLARATION = "CSS_DECLARATION",

    CALC_EXPRESSION = "CALC_EXPRESSION",

    EndOfList = ''

  const defVariable = function(type, value) {
    // console.log('defVariable\t=', type, value)
    return {
      type: type,
      value: value
    }
  }

  const selectorComponent = function(selectorType, value) {
    return defVariable(selectorType, value)
  }

  const selectorCombinator = function(combinatorType, value) {
    return {
      type: SELECTOR_COMBINATOR,
      value: defVariable(combinatorType, value)
    }
  }

  const atRule = function(rule, value, optKey, optVal) {
    // console.log('atRule\t\t = ', rule, value, optKey, optVal)
    var ruleValue = {
      type: AT_RULE,
      rule: rule
    }

    if (value) {
      ruleValue.value = value
    }
    if (optKey) {
      ruleValue[optKey] = optVal
    }

    return ruleValue
  }

  const mediaQuery = function(operator, mediaType, expressions) {
    // console.log('mediaQuery\t = ', operator, mediaType, JSON.stringify(expression))
    var mediaQueryValue = {}

    if (operator) {
      mediaQueryValue.operator = operator
    }
    if (mediaType) {
      mediaQueryValue.mediaType = mediaType
    }
    if (expressions) {
      mediaQueryValue.expressions = expressions
    }

    return defVariable(MEDIA_QUERY, mediaQueryValue)
  }

  const mediaQueryExpr = function(feature, value) {
    var mediaQueryValue = {
      type: MEDIA_QUERY_EXPR
    }
    if (feature) {
      mediaQueryValue.feature = feature
    }
    if (value) {
      mediaQueryValue.value = value
    }

    return mediaQueryValue
  }

  const addProp = function(o, prop, value) {
    if (prop in o) {
      throw new Error('Object already has property: ' + prop)
    }
    
    if (value) {
      o[prop] = value
    }

    return o
  }

  const addComment = function(o, comment) {
    return addProp(o, 'comment', comment)
  }

  const cssDeclaration = function(property, value, important) {
    var cssDeclarationValue = {
      type: CSS_DECLARATION,
      property: property,
      value: value
    }

    if (important) {
      cssDeclarationValue.important = true
    }

    return cssDeclarationValue
  }

  const merge = function(lVal, rVal) {
    // console.log('lVal = (' + typeof(lVal) + ')' + JSON.stringify(lVal), 'rVal = (' + typeof(rVal) + ')' + JSON.stringify(rVal))

    if (!(lVal instanceof(Array))) {
      lVal = [lVal]
    }
    if (!(rVal instanceof(Array))) {
      rVal = [rVal]
    }

    return lVal.concat(rVal)
  }

  const multiDimesionsVal = function(list) {
    if (list.length > 1)
      return {
        type: "DIMENSIONS",
        value: list
      }

    return list
  }
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:
break;
case 1:
break;
case 2:return 136;
break;
case 3:return 53;
break;
case 4:return 54;
break;
case 5:return 55;
break;
case 6:return 56;
break;
case 7:return 133;
break;
case 8:return 65;
break;
case 9:return 66;
break;
case 10:return 77;
break;
case 11:return 64;
break;
case 12:return 73;
break;
case 13:return 85;
break;
case 14:return 84;
break;
case 15:return 20;
break;
case 16:return 22;
break;
case 17:return 25;
break;
case 18:return 34;
break;
case 19:return 49;
break;
case 20:return 46;
break;
case 21:return 58;
break;
case 22:return 57;
break;
case 23:return 'AT_VIEWPORT';
break;
case 24:return 'AT_COUNTER_STYLE';
break;
case 25:return 'AT_FONT_FEATURE_VALUES';
break;
case 26:return 37;
break;
case 27:return 'AT_KEYWORD';
break;
case 28:return 122;
break;
case 29:return 124;
break;
case 30:return 130;
break;
case 31:return 126;
break;
case 32:return 129;
break;
case 33:return 'UNICODE_RANGE';
break;
case 34:return 105;
break;
case 35:return 106;
break;
case 36:return 107;
break;
case 37:return 108;
break;
case 38:return 109;
break;
case 39:return 'COLUMN';
break;
case 40:return 7;
break;
case 41:return 8;
break;
case 42:return 110;
break;
case 43:return 'QUOTATION_MARK';
break;
case 44:return 123;
break;
case 45:return 'DOLLAR_SIGN';
break;
case 46:return 'APOSTROPHE';
break;
case 47:return 67;
break;
case 48:return 71;
break;
case 49:return 99;
break;
case 50:return 95;
break;
case 51:return 52;
break;
case 52:return 132;
break;
case 53:return 98;
break;
case 54:return 139;
break;
case 55:return 69;
break;
case 56:return 14;
break;
case 57:return 'LESS_THAN_SIGN';
break;
case 58:return 94;
break;
case 59:return 'COMMERCIAL_AT';
break;
case 60:return 102;
break;
case 61:return 'REVERSE_SOLIDUS';
break;
case 62:return 104;
break;
case 63:return 'CIRCUMFLEX_ACCENT';
break;
case 64:return 35;
break;
case 65:return 36;
break;
case 66:return 'VERTICAL_LINE ';
break;
case 67:return 96;
break;
case 68:return 131;
break;
case 69:return 116;
break;
case 70:return 5;
break;
case 71:return yy_.yytext;
break;
}
},
rules: [/^(?:\/\*[^*]*\*+([^\/][^*]*\*+)*\/)/,/^(?:(\s)+)/,/^(?:calc\()/,/^(?:url(\(((\s))*((([!#$%&*-~]|([\200-\377])|((\\{h}{1,6}[ \t\r\n\f]?)|\\[ -~\200-\377]))*)|(("([\t !#$%&(-~]|\\{nl}|'|([\200-\377])|((\\{h}{1,6}[ \t\r\n\f]?)|\\[ -~\200-\377]))*")|('([\t !#$%&(-~]|\\{nl}|"|([\200-\377])|((\\{h}{1,6}[ \t\r\n\f]?)|\\[ -~\200-\377]))*')))((\s))*\)))/,/^(?:url-prefix(\(((\s))*((([!#$%&*-~]|([\200-\377])|((\\{h}{1,6}[ \t\r\n\f]?)|\\[ -~\200-\377]))*)|(("([\t !#$%&(-~]|\\{nl}|'|([\200-\377])|((\\{h}{1,6}[ \t\r\n\f]?)|\\[ -~\200-\377]))*")|('([\t !#$%&(-~]|\\{nl}|"|([\200-\377])|((\\{h}{1,6}[ \t\r\n\f]?)|\\[ -~\200-\377]))*')))((\s))*\)))/,/^(?:domain(\(((\s))*((([!#$%&*-~]|([\200-\377])|((\\{h}{1,6}[ \t\r\n\f]?)|\\[ -~\200-\377]))*)|(("([\t !#$%&(-~]|\\{nl}|'|([\200-\377])|((\\{h}{1,6}[ \t\r\n\f]?)|\\[ -~\200-\377]))*")|('([\t !#$%&(-~]|\\{nl}|"|([\200-\377])|((\\{h}{1,6}[ \t\r\n\f]?)|\\[ -~\200-\377]))*')))((\s))*\)))/,/^(?:regexp\(((\s))*(("([\t !#$%&(-~]|\\{nl}|'|([\200-\377])|((\\{h}{1,6}[ \t\r\n\f]?)|\\[ -~\200-\377]))*")|('([\t !#$%&(-~]|\\{nl}|"|([\200-\377])|((\\{h}{1,6}[ \t\r\n\f]?)|\\[ -~\200-\377]))*'))((\s))*\))/,/^(?:(webkit-|moz-|o-|ms-))/,/^(?:(and\b))/,/^(?:(or\b))/,/^(?:(only\b))/,/^(?:(not\b))/,/^(?:(all|aural|braille|handheld|print|projection|screen|tty|tv|embossed|speech\b))/,/^(?:((width|height|aspect-ratio|color|color-index|monochrome|resolution|device-width|device-pixel-ratio\b)|(scan|grid|orientation\b)))/,/^(?:(min-|max-))/,/^(?:@charset\b)/,/^(?:@import\b)/,/^(?:@namespace\b)/,/^(?:@media\b)/,/^(?:@document\b)/,/^(?:@page\b)/,/^(?:@supports\b)/,/^(?:@font-face\b)/,/^(?:@viewport\b)/,/^(?:@counter-style\b)/,/^(?:@font-feature-values\b)/,/^(?:@([-](webkit-|moz-|o-|ms-))?keyframes\b)/,/^(?:[@]([-]?([a-zA-Z]|([\200-\377])|((\\{h}{1,6}[ \t\r\n\f]?)|\\[ -~\200-\377]))([_]|([a-zA-Z0-9-]|([\200-\377])|((\\{h}{1,6}[ \t\r\n\f]?)|\\[ -~\200-\377])))*))/,/^(?:(("([\t !#$%&(-~]|\\{nl}|'|([\200-\377])|((\\{h}{1,6}[ \t\r\n\f]?)|\\[ -~\200-\377]))*")|('([\t !#$%&(-~]|\\{nl}|"|([\200-\377])|((\\{h}{1,6}[ \t\r\n\f]?)|\\[ -~\200-\377]))*')))/,/^(?:[#]([0-9a-fA-F])+)/,/^(?:(([\+\-]?[0-9]+(\.[0-9]+)?)|([\+\-]?\.[0-9]+))([-]?([a-zA-Z]|([\200-\377])|((\\{h}{1,6}[ \t\r\n\f]?)|\\[ -~\200-\377]))([_]|([a-zA-Z0-9-]|([\200-\377])|((\\{h}{1,6}[ \t\r\n\f]?)|\\[ -~\200-\377])))*))/,/^(?:(([\+\-]?[0-9]+(\.[0-9]+)?)|([\+\-]?\.[0-9]+))%)/,/^(?:(([\+\-]?[0-9]+(\.[0-9]+)?)|([\+\-]?\.[0-9]+)))/,/^(?:[Uu]\+(\?{1,6}|{h}(\?{0,5}|{h}(\?{0,4}|{h}(\?{0,3}|{h}(\?{0,2}|{h}(\??|{h})))))))/,/^(?:~=)/,/^(?:\|=)/,/^(?:\^=)/,/^(?:\$=)/,/^(?:\*=)/,/^(?:\|\|)/,/^(?:<!--)/,/^(?:-->)/,/^(?:=)/,/^(?:\\)/,/^(?:#)/,/^(?:\$)/,/^(?:‘)/,/^(?:\()/,/^(?:\))/,/^(?:\*)/,/^(?:\+)/,/^(?:,)/,/^(?:-)/,/^(?:\.)/,/^(?:\/)/,/^(?::)/,/^(?:;)/,/^(?:<)/,/^(?:>)/,/^(?:@)/,/^(?:\[)/,/^(?:\\)/,/^(?:\])/,/^(?:\^)/,/^(?:\{)/,/^(?:\})/,/^(?:\|)/,/^(?:~)/,/^(?:([-]?([a-zA-Z]|([\200-\377])|((\\{h}{1,6}[ \t\r\n\f]?)|\\[ -~\200-\377]))([_]|([a-zA-Z0-9-]|([\200-\377])|((\\{h}{1,6}[ \t\r\n\f]?)|\\[ -~\200-\377])))*))/,/^(?:!important\b)/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = parser;
exports.Parser = parser.Parser;
exports.parse = function () { return parser.parse.apply(parser, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}