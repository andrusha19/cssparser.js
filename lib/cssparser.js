/* parser generated by jison 0.4.17 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var cssparser = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,4],$V1=[1,5],$V2=[1,21],$V3=[1,22],$V4=[1,23],$V5=[1,30],$V6=[1,27],$V7=[1,33],$V8=[1,31],$V9=[1,19],$Va=[1,32],$Vb=[1,48],$Vc=[1,34],$Vd=[1,38],$Ve=[1,39],$Vf=[1,40],$Vg=[1,41],$Vh=[1,42],$Vi=[1,43],$Vj=[1,44],$Vk=[1,45],$Vl=[1,46],$Vm=[1,47],$Vn=[5,7,8,20,22,25,34,37,46,48,56,57,68,95,99,100,101,102,103,104,105,106,107,108],$Vo=[5,7,8,20,22,25,34,36,37,46,48,56,57,68,95,99,100,101,102,103,104,105,106,107,108],$Vp=[1,54],$Vq=[35,51],$Vr=[1,60],$Vs=[1,61],$Vt=[1,62],$Vu=[1,64],$Vv=[1,68],$Vw=[1,71],$Vx=[1,72],$Vy=[1,73],$Vz=[35,51,68,92,93,94,95,99,100,101,102,103,104,105,106,107,108],$VA=[1,86],$VB=[1,88],$VC=[1,85],$VD=[1,91],$VE=[1,92],$VF=[1,93],$VG=[1,94],$VH=[1,98],$VI=[1,99],$VJ=[1,102],$VK=[1,109],$VL=[1,117],$VM=[1,118],$VN=[68,95,99,100,101,102,103,104,105,106,107,108],$VO=[14,63,66,76,103,104,105],$VP=[14,35,36,51,52,63,64,66,68,70,88,92,93,94,95,99,100,101,102,103,104,105,106,107,108,110,111,112,113,114,115,116,124,125,127,131,137,138,142],$VQ=[1,128],$VR=[1,132],$VS=[35,103,104,105,138],$VT=[2,164],$VU=[14,35],$VV=[14,35,51],$VW=[1,136],$VX=[103,104,105],$VY=[35,64,65],$VZ=[35,68],$V_=[1,158],$V$=[1,172],$V01=[5,7,8,20,22,25,34,35,36,37,46,48,56,57,68,95,99,100,101,102,103,104,105,106,107,108,138],$V11=[36,95,102,103,104,105],$V21=[20,22,25,34,36,37,46,48,56,57,68,95,99,100,101,102,103,104,105,106,107,108],$V31=[14,35,51,64],$V41=[63,66],$V51=[1,202],$V61=[1,203],$V71=[1,198],$V81=[52,103,104,105,124,137,138,142,144],$V91=[52,63,70,99,100,103,104,105,107,121,123,124,125,127,137,138,142],$Va1=[1,222],$Vb1=[1,223],$Vc1=[1,224],$Vd1=[1,225],$Ve1=[35,36,103,104,105,138],$Vf1=[70,110],$Vg1=[14,36,51,52,63,70,88,93,95,99,100,102,103,104,105,107,110,124,125,127,131,137,138,142],$Vh1=[14,36],$Vi1=[14,36,51,88],$Vj1=[1,240],$Vk1=[1,238],$Vl1=[1,239],$Vm1=[1,241],$Vn1=[1,242],$Vo1=[14,36,51,52,63,70,88,93,95,99,100,102,103,104,105,107,124,125,127,131,137,138,142],$Vp1=[52,63,99,100,103,104,105,107,124,127,137,138,142],$Vq1=[51,70],$Vr1=[70,93,95,102,125,131];
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"stylesheet":3,"stylesheet_list":4,"EOF":5,"stylesheet_component":6,"CDO":7,"CDC":8,"qualified_rule":9,"at_rule":10,"rule_list":11,"rule_list_component":12,"at_rule_simple":13,"SEMICOLON":14,"at_rule_nested":15,"at_rule_font_face":16,"at_rule_charset":17,"at_rule_import":18,"at_rule_namespace":19,"AT_CHARSET":20,"StringVal":21,"AT_IMPORT":22,"UrlOrStringVal":23,"media_query_list":24,"AT_NAMESPACE":25,"IDENT":26,"at_rule_nested_frontpart":27,"rule_block":28,"at_rule_keyframes":29,"at_rule_page":30,"at_rule_media":31,"at_rule_document":32,"at_rule_supports":33,"AT_MEDIA":34,"LEFT_CURLY_BRACKET":35,"RIGHT_CURLY_BRACKET":36,"AT_KEYFRAMES":37,"keyframes_name":38,"keyframes_block":39,"keyframes_block_list":40,"keyframes_selector":41,"Declarations":42,"IdentVal":43,"PercentageVal":44,"at_rule_page_frontpart":45,"AT_PAGE":46,"SelectorPseudoClassList":47,"AT_DOCUMENT":48,"AtDocumentFuncValList":49,"AtDocumentFuncVal":50,"COMMA":51,"URL_FUNC":52,"URL_PREFIX_FUNC":53,"DOMAIN_FUNC":54,"REGEXP_FUNC":55,"AT_FONT_FACE":56,"AT_SUPPORTS":57,"supports_expression_list":58,"supports_expression":59,"supports_and_or_expression":60,"OperatorAndOr":61,"supports_expression_body":62,"OPERATOR_NOT":63,"OPERATOR_AND":64,"OPERATOR_OR":65,"LEFT_PARENTHESIS":66,"ComponentName":67,"COLON":68,"DeclarationPropValList":69,"RIGHT_PARENTHESIS":70,"media_query_group":71,"media_query":72,"media_query_and_expression_list":73,"OPERATOR_ONLY_NOT":74,"media_query_expression_list":75,"OPERATOR_ONLY":76,"media_query_expression":77,"media_query_and_expression":78,"MediaFeature":79,"GenericVal":80,"css_rule":81,"SelectorList":82,"DeclarationList":83,"DeclarationComponent":84,"Declaration":85,"DeclarationPropName":86,"DeclarationPropValLists":87,"IMPORTANT":88,"SelectorGroup":89,"Selector":90,"SelectorCombinator":91,"GREATER_THAN_SIGN":92,"PLUS_SIGN":93,"TILDE":94,"ASTERISK":95,"SelectorAttr":96,"SelectorPseudoClass":97,"SelectorPseudoElement":98,"HASH_STRING":99,"HEXA_NUMBER":100,"FULL_STOP":101,"ASTERISK_WITH_WHITESPACE":102,"GENERAL_IDENT":103,"VENDOR_PREFIX_IDENT":104,"SELECTOR_TYPE_WITH_WHITESPACE":105,"SELECTOR_CLASS_WITH_WHITESPACE":106,"SELECTOR_ID_WITH_WHITESPACE":107,"LEFT_SQUARE_BRACKET":108,"SelectorAttrOperator":109,"RIGHT_SQUARE_BRACKET":110,"INCLUDE_MATCH":111,"DASH_MATCH":112,"PREFIX_MATCH":113,"SUFFIX_MATCH":114,"SUBSTRING_MATCH":115,"ASSIGN_MARK":116,"PseudoClassFunc":117,"FUNCTION":118,"PseudoClassFuncParam":119,"PseudoClassFuncParams":120,"SelectorGroupVal":121,"PseudoClassFuncParam_an_plus_b":122,"N":123,"NUMBER":124,"HYPHEN_MINUS":125,"CalcFuncVal":126,"CALC_FUNC":127,"CalcExpr":128,"GenericNumericVal":129,"CalcOperator":130,"SOLIDUS":131,"DeclarationPropVals":132,"DeclarationPropVal":133,"UrlVal":134,"FuncVal":135,"HashVal":136,"STRING":137,"PERCENTAGE":138,"IdOrUrlOrStringVal":139,"NumberVal":140,"DimensionVal":141,"DIMENSION":142,"NumericVal":143,"HexaNumericVal":144,"FuncParams":145,"FuncParamOperator":146,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",7:"CDO",8:"CDC",14:"SEMICOLON",20:"AT_CHARSET",22:"AT_IMPORT",25:"AT_NAMESPACE",34:"AT_MEDIA",35:"LEFT_CURLY_BRACKET",36:"RIGHT_CURLY_BRACKET",37:"AT_KEYFRAMES",46:"AT_PAGE",48:"AT_DOCUMENT",51:"COMMA",52:"URL_FUNC",53:"URL_PREFIX_FUNC",54:"DOMAIN_FUNC",55:"REGEXP_FUNC",56:"AT_FONT_FACE",57:"AT_SUPPORTS",63:"OPERATOR_NOT",64:"OPERATOR_AND",65:"OPERATOR_OR",66:"LEFT_PARENTHESIS",68:"COLON",70:"RIGHT_PARENTHESIS",76:"OPERATOR_ONLY",88:"IMPORTANT",92:"GREATER_THAN_SIGN",93:"PLUS_SIGN",94:"TILDE",95:"ASTERISK",99:"HASH_STRING",100:"HEXA_NUMBER",101:"FULL_STOP",102:"ASTERISK_WITH_WHITESPACE",103:"GENERAL_IDENT",104:"VENDOR_PREFIX_IDENT",105:"SELECTOR_TYPE_WITH_WHITESPACE",106:"SELECTOR_CLASS_WITH_WHITESPACE",107:"SELECTOR_ID_WITH_WHITESPACE",108:"LEFT_SQUARE_BRACKET",110:"RIGHT_SQUARE_BRACKET",111:"INCLUDE_MATCH",112:"DASH_MATCH",113:"PREFIX_MATCH",114:"SUFFIX_MATCH",115:"SUBSTRING_MATCH",116:"ASSIGN_MARK",121:"SelectorGroupVal",123:"N",124:"NUMBER",125:"HYPHEN_MINUS",127:"CALC_FUNC",131:"SOLIDUS",137:"STRING",138:"PERCENTAGE",142:"DIMENSION",144:"HexaNumericVal"},
productions_: [0,[3,2],[4,1],[4,2],[6,1],[6,1],[6,1],[6,1],[11,1],[11,2],[12,1],[12,1],[10,2],[10,1],[10,1],[13,1],[13,1],[13,1],[17,2],[18,2],[18,3],[19,2],[19,3],[15,2],[15,1],[15,1],[27,1],[27,1],[27,1],[31,2],[28,3],[28,2],[29,3],[39,2],[39,3],[39,2],[40,1],[40,2],[38,1],[38,1],[41,1],[41,1],[30,2],[45,1],[45,2],[32,2],[49,1],[49,3],[50,1],[50,1],[50,1],[50,1],[16,2],[33,2],[58,1],[58,2],[60,2],[59,1],[59,2],[61,1],[61,1],[62,5],[24,1],[71,1],[71,3],[72,1],[72,2],[72,2],[72,3],[72,1],[74,1],[74,1],[75,2],[75,1],[73,2],[73,1],[78,2],[77,3],[77,5],[79,1],[9,1],[81,2],[42,4],[42,3],[42,3],[42,2],[83,1],[83,2],[85,2],[84,4],[84,3],[82,1],[82,3],[89,1],[89,2],[89,3],[91,1],[91,1],[91,1],[90,1],[90,1],[90,1],[90,1],[90,1],[90,1],[90,2],[90,1],[90,1],[90,1],[90,1],[90,1],[90,1],[96,5],[96,3],[109,1],[109,1],[109,1],[109,1],[109,1],[109,1],[98,3],[47,1],[47,2],[97,2],[97,2],[117,2],[117,3],[120,1],[120,2],[119,1],[119,1],[122,1],[122,3],[122,4],[122,1],[122,2],[122,3],[126,2],[126,3],[128,1],[128,3],[130,1],[130,1],[130,1],[130,1],[130,1],[87,1],[87,3],[69,1],[132,1],[132,2],[132,3],[133,1],[133,1],[133,1],[133,1],[133,1],[133,1],[133,1],[86,1],[86,2],[86,2],[21,1],[134,1],[43,1],[136,1],[136,1],[136,1],[44,1],[23,1],[23,1],[139,1],[139,1],[139,1],[140,1],[141,1],[129,1],[129,1],[129,1],[143,1],[143,1],[80,1],[80,1],[26,1],[26,1],[26,1],[67,1],[135,2],[135,3],[118,2],[118,2],[145,1],[145,3],[145,3],[146,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:

      this.$ = {
        type: 'STYLESHEET',
        value: $$[$0-1]
      }

      return this.$
    
break;
case 2:

      this.$ = []
      if ($$[$0])
        this.$.push($$[$0])
    
break;
case 3:

      if ($$[$0-1] == null) {
        this.$ = $$[$0]
        return
      }

      this.$ = [$$[$0-1]].concat($$[$0])
    
break;
case 4: case 5: case 6: case 7: case 10: case 11: case 80: case 149:
this.$ = $$[$0];
break;
case 8: case 63: case 73: case 75: case 86: case 127: case 191:
this.$ = [$$[$0]];
break;
case 9:
this.$ = [$$[$0-1]].concat($$[$0]);
break;
case 18: case 19: case 21:
this.$ = atRule($$[$0-1], $$[$0]);
break;
case 20:
this.$ = atRule($$[$0-2], $$[$0-1], 'mediaQueries', $$[$0]);
break;
case 22:
this.$ = atRule($$[$0-2], $$[$0], 'prefix', $$[$0-1]);
break;
case 23:
this.$ = addProp($$[$0-1], 'nestedRules', $$[$0]);
break;
case 29:
this.$ = atRule($$[$0-1], null, 'mediaQueries', $$[$0]);
break;
case 30: case 34: case 88: case 189: case 190:
this.$ = $$[$0-1];
break;
case 31: case 33:
this.$ = null;
break;
case 32:
this.$ = atRule($$[$0-2], $$[$0], 'name', $$[$0-1]);
break;
case 35:
this.$ = { type: KEYFRAMES_BLOCK, selector: $$[$0-1], declarations: $$[$0] };
break;
case 37: case 55: case 72: case 74: case 87: case 94: case 128: case 150:
this.$ = merge($$[$0-1], $$[$0]);
break;
case 42:
this.$ = addProp($$[$0-1], 'declarations', $$[$0]);
break;
case 43:
this.$ = atRule($$[$0], null);
break;
case 44:
this.$ = atRule($$[$0-1], null, 'pseudoClasses', $$[$0]);
break;
case 45:
this.$ = atRule($$[$0-1], null, 'value', { type: FUNCTIONS, value: $$[$0] });
break;
case 47: case 147: case 192:
this.$ = merge($$[$0-2], $$[$0]);
break;
case 48:
this.$ = { type: FUNCTION, name: "url", value: $$[$0] };
break;
case 49:
this.$ = { type: FUNCTION, name: "url-prefix", value: $$[$0] };
break;
case 50:
this.$ = { type: FUNCTION, name: "domain", value: $$[$0] };
break;
case 51:
this.$ = { type: FUNCTION, name: "regexp", value: $$[$0] };
break;
case 52:
this.$ = { type: FONT_FACE, declarations: $$[$0] };
break;
case 53:
this.$ = atRule($$[$0-1], null, 'expressions', $$[$0]);
break;
case 56:
this.$ = { operator: $$[$0-1], expression: $$[$0] };
break;
case 57:
this.$ = { value: $$[$0] };
break;
case 58:
this.$ = { value: $$[$0], not: true };
break;
case 61:
this.$ = { property: $$[$0-3], value: $$[$0-1] };
break;
case 62:
this.$ = { type: MEDIA_QUERIES, value: $$[$0] };
break;
case 64:
this.$ = $$[$0].concat([$$[$0-2]]);
break;
case 65:
this.$ = mediaQuery(null, $$[$0]);
break;
case 66:
this.$ = mediaQuery(null, $$[$0-1], $$[$0]);
break;
case 67:
this.$ = mediaQuery($$[$0-1], $$[$0]);
break;
case 68:
this.$ = mediaQuery($$[$0-2], $$[$0-1], $$[$0]);
break;
case 69:
this.$ = mediaQuery(null, null, $$[$0]);
break;
case 76:
this.$ = addProp($$[$0], 'operator', $$[$0-1]);
break;
case 77:
this.$ = mediaQueryExpr($$[$0-1]);
break;
case 78:
this.$ = mediaQueryExpr($$[$0-3], $$[$0-1]);
break;
case 81:

        // console.log(' => CSS_RULE')
        this.$ = {
          type: CSS_RULE,
          selectors: $$[$0-1],
          declarations: $$[$0]
        }
    
break;
case 82:
this.$ = declarations(merge($$[$0-2], $$[$0-1]));
break;
case 83: case 84:
this.$ = declarations($$[$0-1]);
break;
case 85:
this.$ = [];
break;
case 89:
this.$ = cssDeclarationVal($$[$0-3], $$[$0-1], $$[$0]);
break;
case 90:
this.$ = cssDeclarationVal($$[$0-2], $$[$0]);
break;
case 91:
this.$ = defVariable(SELECTOR, removeTailingSelectorCombinator($$[$0]));
break;
case 92:
this.$ = merge($$[$0-2], defVariable(SELECTOR, removeTailingSelectorCombinator($$[$0])));
break;
case 95:
this.$ = merge($$[$0-2], [$$[$0-1], $$[$0]]);
break;
case 96:
this.$ = selectorCombinator("CHILD", $$[$0]);
break;
case 97:
this.$ = selectorCombinator("ADJACENT_SIBLING", $$[$0]);
break;
case 98:
this.$ = selectorCombinator("GENERAL_SIBLING", $$[$0]);
break;
case 99:
this.$ = selectorComponent(UNIVERSAL_SELECTOR, $$[$0]);
break;
case 100:
this.$ = selectorComponent(ATTR_SELECTOR, $$[$0]);
break;
case 101:
this.$ = selectorComponent(PSEUDO_CLASS, $$[$0]);
break;
case 102:
this.$ = selectorComponent(PSEUDO_ELEMENT, $$[$0]);
break;
case 103: case 104:
this.$ = selectorComponent(ID_SELECTOR, { type: 'HASH', value: $$[$0] });
break;
case 105:
this.$ = selectorComponent(CLASS_SELECTOR, { type: 'HASH', value: $$[$0-1] + $$[$0] });
break;
case 106:
this.$ = selectorComponent(UNIVERSAL_SELECTOR, $$[$0].trimRight(), selectorCombinator("DESCENDANT", $$[$0]));
break;
case 107: case 108:
this.$ = selectorComponent(TYPE_SELECTOR, vendorPrefixIdVal($$[$0]), selectorCombinator("DESCENDANT", $$[$0]));
break;
case 109:
this.$ = selectorComponent(TYPE_SELECTOR, $$[$0].trimRight(), selectorCombinator("DESCENDANT", " "));
break;
case 110:
this.$ = selectorComponent(CLASS_SELECTOR, $$[$0].trimRight(), selectorCombinator("DESCENDANT", " "));
break;
case 111:
this.$ = selectorComponent(ID_SELECTOR, { type: 'HASH', value: $$[$0].trimRight() }, selectorCombinator("DESCENDANT", " "));
break;
case 112:

      this.$ = {
        attribute: $$[$0-3],
        operator: $$[$0-2],
        value: $$[$0-1]
      }
    
break;
case 113:

      this.$ = {
        attribute: $$[$0-1]
      }
    
break;
case 114:
this.$ = defVariable('include', $$[$0]);
break;
case 115:
this.$ = defVariable('dash', $$[$0]);
break;
case 116:
this.$ = defVariable('prefix', $$[$0]);
break;
case 117:
this.$ = defVariable('suffix', $$[$0]);
break;
case 118:
this.$ = defVariable('substring', $$[$0]);
break;
case 119:
this.$ = defVariable('equal', $$[$0]);
break;
case 120:

      this.$ = $$[$0]
      this.$.prefix = $$[$0-2] + $$[$0-1]
      this.$.fullQuailfied = this.$.prefix + this.$.fullQuailfied
    
break;
case 121:
this.$ = [defVariable(PSEUDO_CLASS, $$[$0])];
break;
case 122:
this.$ = merge($$[$0-1], defVariable(PSEUDO_CLASS, $$[$0-1]));
break;
case 123:
this.$ = { fullQuailfied: $$[$0-1] + $$[$0], name: $$[$0] };
break;
case 124:
this.$ = { fullQuailfied: $$[$0-1] + $$[$0].name, name: $$[$0] };
break;
case 125:
this.$ = { type: "FUNCTION", name: $$[$0-1] };
break;
case 126:
this.$ = { type: "FUNCTION", name: $$[$0-2], parameters: $$[$0-1] };
break;
case 137:
this.$ = { type: FUNCTION, name: 'calc' };
break;
case 138:
this.$ = { type: FUNCTION, name: 'calc', expressions: $$[$0-1] };
break;
case 140: case 151:

      this.$ = {
        type: CALC_EXPRESSION,
        leftHandSide: $$[$0-2],
        operator: $$[$0-1],
        rightHandSide: $$[$0]
      }
    
break;
case 142: case 185:
this.$ = $$[$0].trimRight();
break;
case 148:
this.$ = multiDimesionsVal($$[$0]);
break;
case 160:
this.$ =  addProp($$[$0], 'asteriskHack', true);
break;
case 161:
this.$ =  addProp($$[$0].trimRight(), 'asteriskHack', true);
break;
case 162:
this.$ = { type: 'STRING', value: $$[$0] };
break;
case 163:
this.$ = { type: 'URL', value: $$[$0] };
break;
case 164: case 186:
this.$ = vendorPrefixIdVal($$[$0]);
break;
case 165: case 166:
this.$ = { type: 'HASH', value: $$[$0] };
break;
case 167:
this.$ = { type: 'HASH', value: $$[$0].trimRight() };
break;
case 168:
this.$ = percentageVal($$[$0]);
break;
case 174:
this.$ = { type: NUMBER, value: parseFloat($$[$0]) };
break;
case 175:
this.$ = demensionUnitVal($$[$0]);
break;
case 187:
this.$ = { type: FUNCTION, name: $$[$0-1] };
break;
case 188:
this.$ = { type: FUNCTION, name: $$[$0-2], parameters: $$[$0-1] };
break;
case 193:

      this.$ = [{
        type: EXPRESSION,
        operator: $$[$0-1],
        rightHandSide: $$[$0]
      }]
    
break;
case 194:
this.$ = { type: 'ASSIGN_OPERATOR', value: $$[$0] };
break;
}
},
table: [{3:1,4:2,6:3,7:$V0,8:$V1,9:6,10:7,13:9,15:10,16:11,17:13,18:14,19:15,20:$V2,22:$V3,25:$V4,27:16,29:17,30:18,31:24,32:25,33:26,34:$V5,37:$V6,45:28,46:$V7,48:$V8,56:$V9,57:$Va,68:$Vb,81:8,82:12,89:20,90:29,95:$Vc,96:35,97:36,98:37,99:$Vd,100:$Ve,101:$Vf,102:$Vg,103:$Vh,104:$Vi,105:$Vj,106:$Vk,107:$Vl,108:$Vm},{1:[3]},{5:[1,49]},{4:50,5:[2,2],6:3,7:$V0,8:$V1,9:6,10:7,13:9,15:10,16:11,17:13,18:14,19:15,20:$V2,22:$V3,25:$V4,27:16,29:17,30:18,31:24,32:25,33:26,34:$V5,37:$V6,45:28,46:$V7,48:$V8,56:$V9,57:$Va,68:$Vb,81:8,82:12,89:20,90:29,95:$Vc,96:35,97:36,98:37,99:$Vd,100:$Ve,101:$Vf,102:$Vg,103:$Vh,104:$Vi,105:$Vj,106:$Vk,107:$Vl,108:$Vm},o($Vn,[2,4]),o($Vn,[2,5]),o($Vn,[2,6]),o($Vn,[2,7]),o($Vo,[2,80]),{14:[1,51]},o($Vo,[2,13]),o($Vo,[2,14]),{35:$Vp,42:52,51:[1,53]},{14:[2,15]},{14:[2,16]},{14:[2,17]},{28:55,35:[1,56]},o($Vo,[2,24]),o($Vo,[2,25]),{35:$Vp,42:57},o($Vq,[2,91],{96:35,97:36,98:37,90:58,91:59,68:$Vb,92:$Vr,93:$Vs,94:$Vt,95:$Vc,99:$Vd,100:$Ve,101:$Vf,102:$Vg,103:$Vh,104:$Vi,105:$Vj,106:$Vk,107:$Vl,108:$Vm}),{21:63,137:$Vu},{21:66,23:65,52:$Vv,134:67,137:$Vu},{21:66,23:69,26:70,52:$Vv,103:$Vw,104:$Vx,105:$Vy,134:67,137:$Vu},{35:[2,26]},{35:[2,27]},{35:[2,28]},{21:76,26:77,38:74,43:75,103:$Vw,104:$Vx,105:$Vy,137:$Vu},{35:$Vp,42:78},o($Vz,[2,93]),{24:79,26:82,63:$VA,66:$VB,71:80,72:81,74:83,75:84,76:$VC,77:87,103:$Vw,104:$Vx,105:$Vy},{49:89,50:90,52:$VD,53:$VE,54:$VF,55:$VG},{58:95,59:96,62:97,63:$VH,66:$VI},{35:[2,43],47:100,68:$VJ,97:101},o($Vz,[2,99]),o($Vz,[2,100]),o($Vz,[2,101]),o($Vz,[2,102]),o($Vz,[2,103]),o($Vz,[2,104]),{26:103,103:$Vw,104:$Vx,105:$Vy},o($Vz,[2,106]),o($Vz,[2,107]),o($Vz,[2,108]),o($Vz,[2,109]),o($Vz,[2,110]),o($Vz,[2,111]),{26:104,103:$Vw,104:$Vx,105:$Vy},{26:105,63:$VK,68:[1,107],103:$Vw,104:$Vx,105:$Vy,117:106,118:108},{1:[2,1]},{5:[2,3]},o($Vo,[2,12]),o($Vo,[2,81]),{68:$Vb,89:110,90:29,95:$Vc,96:35,97:36,98:37,99:$Vd,100:$Ve,101:$Vf,102:$Vg,103:$Vh,104:$Vi,105:$Vj,106:$Vk,107:$Vl,108:$Vm},{26:77,36:[1,113],43:116,83:111,84:112,85:114,86:115,95:$VL,102:$VM,103:$Vw,104:$Vx,105:$Vy},o($Vo,[2,23]),{9:122,10:123,11:119,12:121,13:9,15:10,16:11,17:13,18:14,19:15,20:$V2,22:$V3,25:$V4,27:16,29:17,30:18,31:24,32:25,33:26,34:$V5,36:[1,120],37:$V6,45:28,46:$V7,48:$V8,56:$V9,57:$Va,68:$Vb,81:8,82:12,89:20,90:29,95:$Vc,96:35,97:36,98:37,99:$Vd,100:$Ve,101:$Vf,102:$Vg,103:$Vh,104:$Vi,105:$Vj,106:$Vk,107:$Vl,108:$Vm},o($Vo,[2,52]),o($Vz,[2,94]),{68:$Vb,90:124,95:$Vc,96:35,97:36,98:37,99:$Vd,100:$Ve,101:$Vf,102:$Vg,103:$Vh,104:$Vi,105:$Vj,106:$Vk,107:$Vl,108:$Vm},o($VN,[2,96]),o($VN,[2,97]),o($VN,[2,98]),{14:[2,18]},o([14,35,36,51,52,63,66,70,76,88,93,95,99,100,102,103,104,105,107,110,124,125,127,131,137,138,142],[2,162]),{14:[2,19],24:125,26:82,63:$VA,66:$VB,71:80,72:81,74:83,75:84,76:$VC,77:87,103:$Vw,104:$Vx,105:$Vy},o($VO,[2,169]),o($VO,[2,170]),o([14,36,51,52,63,66,70,76,88,93,95,99,100,102,103,104,105,107,110,124,125,127,131,137,138,142],[2,163]),{14:[2,21]},{21:66,23:126,52:$Vv,134:67,137:$Vu},o($VP,[2,183]),o($VP,[2,184]),o($VP,[2,185]),{26:77,35:$VQ,39:127,41:129,43:130,44:131,103:$Vw,104:$Vx,105:$Vy,138:$VR},o($VS,[2,38]),o($VS,[2,39]),o([35,51,68,70,92,93,94,95,99,100,101,102,103,104,105,106,107,108,110,138],$VT),o($Vo,[2,42]),{35:[2,29]},o($VU,[2,62]),o($VU,[2,63],{51:[1,133]}),o($VV,[2,65],{73:134,78:135,64:$VW}),{26:137,103:$Vw,104:$Vx,105:$Vy},o($VV,[2,69]),o($VX,[2,70]),o($VX,[2,71]),o($VV,[2,73],{78:135,73:138,64:$VW}),{26:77,43:140,79:139,103:$Vw,104:$Vx,105:$Vy},{35:[2,45],51:[1,141]},o($Vq,[2,46]),o($Vq,[2,48]),o($Vq,[2,49]),o($Vq,[2,50]),o($Vq,[2,51]),{35:[2,53],60:142,61:143,64:[1,144],65:[1,145]},o($VY,[2,54]),o($VY,[2,57]),{62:146,66:$VI},{26:148,67:147,103:$Vw,104:$Vx,105:$Vy},{35:[2,44],68:$VJ,97:149},o($VZ,[2,121]),{26:105,63:$VK,103:$Vw,104:$Vx,105:$Vy,117:106,118:108},o($Vz,[2,105]),{109:150,110:[1,151],111:[1,152],112:[1,153],113:[1,154],114:[1,155],115:[1,156],116:[1,157]},o($Vz,[2,123],{66:$V_}),o($Vz,[2,124]),{26:77,43:159,103:$Vw,104:$Vx,105:$Vy},{70:[1,160],119:161,121:[1,162],122:163,123:[1,164],124:[1,166],125:[1,165]},{66:[1,167]},o($Vq,[2,92],{96:35,97:36,98:37,90:58,91:59,68:$Vb,92:$Vr,93:$Vs,94:$Vt,95:$Vc,99:$Vd,100:$Ve,101:$Vf,102:$Vg,103:$Vh,104:$Vi,105:$Vj,106:$Vk,107:$Vl,108:$Vm}),{26:77,36:[1,169],43:116,84:168,85:170,86:115,95:$VL,102:$VM,103:$Vw,104:$Vx,105:$Vy},{14:$V$,36:[1,171]},o($V01,[2,85]),o($V11,[2,86]),{68:[1,173]},{68:[2,159]},{26:77,43:174,103:$Vw,104:$Vx,105:$Vy},{26:77,43:175,103:$Vw,104:$Vx,105:$Vy},{36:[1,176]},o($Vo,[2,31]),{9:122,10:123,11:177,12:121,13:9,15:10,16:11,17:13,18:14,19:15,20:$V2,22:$V3,25:$V4,27:16,29:17,30:18,31:24,32:25,33:26,34:$V5,36:[2,8],37:$V6,45:28,46:$V7,48:$V8,56:$V9,57:$Va,68:$Vb,81:8,82:12,89:20,90:29,95:$Vc,96:35,97:36,98:37,99:$Vd,100:$Ve,101:$Vf,102:$Vg,103:$Vh,104:$Vi,105:$Vj,106:$Vk,107:$Vl,108:$Vm},o($V21,[2,10]),o($V21,[2,11]),o($Vz,[2,95]),{14:[2,20]},{14:[2,22]},o($Vo,[2,32]),{26:77,35:$VQ,36:[1,178],39:180,40:179,41:129,43:130,44:131,103:$Vw,104:$Vx,105:$Vy,138:$VR},{35:$Vp,42:181},{35:[2,40]},{35:[2,41]},o([14,35,36,51,52,63,70,88,93,95,99,100,102,103,104,105,107,110,124,125,127,131,137,138,142],[2,168]),{26:82,63:$VA,66:$VB,71:182,72:81,74:83,75:84,76:$VC,77:87,103:$Vw,104:$Vx,105:$Vy},o($VV,[2,66],{78:183,64:$VW}),o($V31,[2,75]),{66:$VB,77:184},o($VV,[2,67],{78:135,73:185,64:$VW}),o($VV,[2,72],{78:183,64:$VW}),{68:[1,187],70:[1,186]},o([68,70],[2,79]),{50:188,52:$VD,53:$VE,54:$VF,55:$VG},o($VY,[2,55]),{59:189,62:97,63:$VH,66:$VI},o($V41,[2,59]),o($V41,[2,60]),o($VY,[2,58]),{68:[1,190]},{68:[2,186]},o($VZ,[2,122]),{21:194,26:77,43:196,44:201,52:$Vv,80:191,103:$Vw,104:$Vx,105:$Vy,124:$V51,129:197,134:195,137:$Vu,138:$VR,139:192,140:199,141:200,142:$V61,143:193,144:$V71},o($Vz,[2,113]),o($V81,[2,114]),o($V81,[2,115]),o($V81,[2,116]),o($V81,[2,117]),o($V81,[2,118]),o($V81,[2,119]),o($V91,[2,189]),o($Vz,[2,120]),o($Vz,[2,125]),{70:[1,204]},{70:[2,129]},{70:[2,130]},{70:[2,131],93:[1,205]},{123:[1,206],124:[1,207]},{70:[2,134]},o($V91,[2,190]),{14:$V$,36:[1,208]},o($V01,[2,83]),o($V11,[2,87]),o($V01,[2,84]),o($V11,[2,88]),{21:213,26:220,43:215,44:201,52:$Vv,63:$VK,69:210,87:209,99:$Va1,100:$Vb1,103:$Vw,104:$Vx,105:$Vy,107:$Vc1,118:221,124:$V51,126:219,127:$Vd1,129:217,132:211,133:212,134:214,135:216,136:218,137:$Vu,138:$VR,140:199,141:200,142:$V61},{68:[2,160]},{68:[2,161]},o($Vo,[2,30]),{36:[2,9]},o($V01,[2,33]),{26:77,35:$VQ,36:[1,226],39:227,41:129,43:130,44:131,103:$Vw,104:$Vx,105:$Vy,138:$VR},o($Ve1,[2,36]),o($V01,[2,35]),o($VU,[2,64]),o($V31,[2,74]),o($V31,[2,76]),o($VV,[2,68],{78:183,64:$VW}),o($V31,[2,77]),{21:194,26:77,43:196,44:201,52:$Vv,80:228,103:$Vw,104:$Vx,105:$Vy,124:$V51,129:197,134:195,137:$Vu,138:$VR,139:192,140:199,141:200,142:$V61,143:193,144:$V71},o($Vq,[2,47]),o($VY,[2,56]),{21:213,26:220,43:215,44:201,52:$Vv,63:$VK,69:229,99:$Va1,100:$Vb1,103:$Vw,104:$Vx,105:$Vy,107:$Vc1,118:221,124:$V51,126:219,127:$Vd1,129:217,132:211,133:212,134:214,135:216,136:218,137:$Vu,138:$VR,140:199,141:200,142:$V61},{110:[1,230]},o($Vf1,[2,181]),o($Vf1,[2,182]),o($Vf1,[2,171]),o($Vf1,[2,172]),o($Vf1,[2,173]),o($Vf1,[2,179]),o($Vf1,[2,180]),o($Vg1,[2,176]),o($Vg1,[2,177]),o($Vg1,[2,178]),o($Vg1,[2,174]),o($Vg1,[2,175]),o($Vz,[2,126]),{124:[1,231]},{70:[2,135],93:[1,232]},{123:[1,233]},o($V01,[2,82]),o($Vh1,[2,90],{51:[1,235],88:[1,234]}),o($Vi1,[2,146]),o([14,36,51,70,88],[2,148],{140:199,141:200,44:201,21:213,134:214,43:215,135:216,129:217,136:218,126:219,26:220,118:221,133:236,130:237,52:$Vv,63:$VK,93:$Vj1,95:$Vk1,99:$Va1,100:$Vb1,102:$Vl1,103:$Vw,104:$Vx,105:$Vy,107:$Vc1,124:$V51,125:$Vm1,127:$Vd1,131:$Vn1,137:$Vu,138:$VR,142:$V61}),o($Vo1,[2,149]),o($Vo1,[2,152]),o($Vo1,[2,153]),o($Vo1,[2,154]),o($Vo1,[2,155]),o($Vo1,[2,156]),o($Vo1,[2,157]),o($Vo1,[2,158]),o($Vo1,$VT,{66:$V_}),{21:213,26:246,43:215,44:201,52:$Vv,63:$VK,70:[1,243],99:$Va1,100:$Vb1,103:$Vw,104:$Vx,105:$Vy,107:$Vc1,118:221,124:$V51,126:219,127:$Vd1,129:217,132:245,133:212,134:214,135:216,136:218,137:$Vu,138:$VR,140:199,141:200,142:$V61,145:244},o($Vo1,[2,165]),o($Vo1,[2,166]),o($Vo1,[2,167]),{44:201,70:[1,247],124:$V51,128:248,129:249,138:$VR,140:199,141:200,142:$V61},o($V01,[2,34]),o($Ve1,[2,37]),{70:[1,250]},{70:[1,251]},o($Vz,[2,112]),{70:[2,132]},{124:[1,252]},{70:[2,136]},o($Vh1,[2,89]),{21:213,26:220,43:215,44:201,52:$Vv,63:$VK,69:253,99:$Va1,100:$Vb1,103:$Vw,104:$Vx,105:$Vy,107:$Vc1,118:221,124:$V51,126:219,127:$Vd1,129:217,132:211,133:212,134:214,135:216,136:218,137:$Vu,138:$VR,140:199,141:200,142:$V61},o($Vo1,[2,150]),{21:213,26:220,43:215,44:201,52:$Vv,63:$VK,99:$Va1,100:$Vb1,103:$Vw,104:$Vx,105:$Vy,107:$Vc1,118:221,124:$V51,126:219,127:$Vd1,129:217,133:254,134:214,135:216,136:218,137:$Vu,138:$VR,140:199,141:200,142:$V61},o($Vp1,[2,141]),o($Vp1,[2,142]),o($Vp1,[2,143]),o($Vp1,[2,144]),o($Vp1,[2,145]),o($Vo1,[2,187]),{51:[1,256],70:[1,255]},o($Vq1,[2,191],{140:199,141:200,44:201,21:213,134:214,43:215,135:216,129:217,136:218,126:219,26:220,118:221,133:236,130:237,52:$Vv,63:$VK,93:$Vj1,95:$Vk1,99:$Va1,100:$Vb1,102:$Vl1,103:$Vw,104:$Vx,105:$Vy,107:$Vc1,124:$V51,125:$Vm1,127:$Vd1,131:$Vn1,137:$Vu,138:$VR,142:$V61}),o([51,52,63,70,93,95,99,100,102,103,104,105,107,124,125,127,131,137,138,142],$VT,{146:257,66:$V_,116:[1,258]}),o($Vo1,[2,137]),{70:[1,259],93:$Vj1,95:$Vk1,102:$Vl1,125:$Vm1,130:260,131:$Vn1},o($Vr1,[2,139]),o($V31,[2,78]),o($VY,[2,61]),{70:[2,133]},o($Vi1,[2,147]),o($Vo1,[2,151]),o($Vo1,[2,188]),{21:213,26:220,43:215,44:201,52:$Vv,63:$VK,99:$Va1,100:$Vb1,103:$Vw,104:$Vx,105:$Vy,107:$Vc1,118:221,124:$V51,126:219,127:$Vd1,129:217,132:261,133:212,134:214,135:216,136:218,137:$Vu,138:$VR,140:199,141:200,142:$V61},{44:201,124:$V51,129:262,138:$VR,140:199,141:200,142:$V61},o([124,138,142],[2,194]),o($Vo1,[2,138]),{44:201,124:$V51,129:263,138:$VR,140:199,141:200,142:$V61},o($Vq1,[2,192],{140:199,141:200,44:201,21:213,134:214,43:215,135:216,129:217,136:218,126:219,26:220,118:221,133:236,130:237,52:$Vv,63:$VK,93:$Vj1,95:$Vk1,99:$Va1,100:$Vb1,102:$Vl1,103:$Vw,104:$Vx,105:$Vy,107:$Vc1,124:$V51,125:$Vm1,127:$Vd1,131:$Vn1,137:$Vu,138:$VR,142:$V61}),o($Vq1,[2,193]),o($Vr1,[2,140])],
defaultActions: {13:[2,15],14:[2,16],15:[2,17],24:[2,26],25:[2,27],26:[2,28],49:[2,1],50:[2,3],63:[2,18],69:[2,21],79:[2,29],116:[2,159],125:[2,20],126:[2,22],130:[2,40],131:[2,41],148:[2,186],162:[2,129],163:[2,130],166:[2,134],174:[2,160],175:[2,161],177:[2,9],231:[2,132],233:[2,136],252:[2,133]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        function _parseError (msg, hash) {
            this.message = msg;
            this.hash = hash;
        }
        _parseError.prototype = Error;

        throw new _parseError(str, hash);
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

  const
    AT_RULE = "AT_RULE",

    MEDIA_QUERIES = "MEDIA_QUERIES",
    MEDIA_QUERY = "MEDIA_QUERY",
    MEDIA_QUERY_EXPR = "MEDIA_QUERY_EXPR",

    FONT_FACE = "FONT_FACE",

    /*
     * Ref: [1] https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Selectors 
     */
    SELECTOR = "SELECTOR",
    TYPE_SELECTOR = "TYPE_SELECTOR",
    CLASS_SELECTOR = "CLASS_SELECTOR",
    ID_SELECTOR = "ID_SELECTOR",
    UNIVERSAL_SELECTOR = "UNIVERSAL_SELECTOR",
    ATTR_SELECTOR = "ATTR_SELECTOR",
    ATTR_OPERATOR = "ATTR_OPERATOR",
    PSEUDO_CLASS = "PSEUDO_CLASS",
    PSEUDO_ELEMENT = "PSEUDO_ELEMENT",
    SELECTOR_COMBINATOR = "SELECTOR_COMBINATOR",

    CSS_RULE = "CSS_RULE",
    DECLARATIONS = "DECLARATIONS",
    DECLARATION = "DECLARATION",

    CALC_EXPRESSION = "CALC_EXPRESSION",
    EXPRESSION = "EXPRESSION",

    MEDIA_TYPE = "MEDIA_TYPE",

    KEYFRAMES_BLOCK = "KEYFRAMES_BLOCK",

    FUNCTIONS = "FUNCTIONS",
    FUNCTION = "FUNCTION",

    DIMENSIONS = "DIMENSIONS",
    DIMENSION = "DIMENSION",

    PERCENTAGE = "PERCENTAGE",
    NUMBER = "NUMBER",

    EndOfList = ''

  const defVariable = function(type, value) {
    // console.log('defVariable\t=', type, value)
    return {
      type: type,
      value: value
    }
  }

  const selectorComponent = function(selectorType, value, combinator) {
    var component = defVariable(selectorType, (typeof(value) == 'string')? value.trimRight(): value)

    if (combinator) {
      return merge(component, combinator)
    }

    return component
  }
  
  const selectorCombinator = function(combinatorType, value) {
    return {
      type: SELECTOR_COMBINATOR,
      value: defVariable(combinatorType, value)
    }
  }

  const removeTailingSelectorCombinator = function(list) {
    if (list.length > 0) {
      var lastItem = list[list.length - 1]

      if (lastItem.type == SELECTOR_COMBINATOR) {
        list.pop()
        return list
      }
    }

    return list
  }

  const atRule = function(rule, value, optKey, optVal) {
    // console.log('atRule\t\t = ', rule, value, optKey, optVal)
    var ruleValue = {
      type: AT_RULE,
      rule: rule
    }

    if (value) {
      ruleValue.value = value
    }
    if (optKey) {
      ruleValue[optKey] = optVal
    }

    return ruleValue
  }

  const mediaQuery = function(operator, mediaType, expressions) {
    // console.log('mediaQuery\t = ', operator, mediaType, JSON.stringify(expression))
    var mediaQueryValue = {
      type: MEDIA_TYPE
    }

    if (operator) {
      mediaQueryValue.operator = operator
    }
    if (mediaType) {
      mediaQueryValue.value = mediaType
    }
    if (expressions) {
      mediaQueryValue.expressions = expressions
    }

    return defVariable(MEDIA_QUERY, mediaQueryValue)
  }

  const mediaQueryExpr = function(feature, value) {
    var mediaQueryValue = {
      type: MEDIA_QUERY_EXPR
    }
    if (feature) {
      mediaQueryValue.feature = feature
    }
    if (value) {
      mediaQueryValue.value = value
    }

    return mediaQueryValue
  }

  const addProp = function(o, prop, value) {
    if (prop in o) {
      throw new Error('Object already has property: ' + prop)
    }
    
    if (value) {
      o[prop] = value
    }

    return o
  }

  const addComment = function(o, comment) {
    return addProp(o, 'comment', comment)
  }

  const declarations = function(value) {
    var cssDeclarations = {
      type: DECLARATIONS,
      value: value
    }

    return cssDeclarations
  }

  const cssDeclarationVal = function(property, value, important) {
    var cssDeclarationValue = {
      type: DECLARATION,
      property: property,
      value: value
    }

    if (important) {
      cssDeclarationValue.important = true
    }

    return cssDeclarationValue
  }

  const merge = function(lVal, rVal) {
    // console.log('lVal = (' + typeof(lVal) + ')' + JSON.stringify(lVal), 'rVal = (' + typeof(rVal) + ')' + JSON.stringify(rVal))

    if (!(lVal instanceof(Array))) {
      lVal = [lVal]
    }
    if (!(rVal instanceof(Array))) {
      rVal = [rVal]
    }

    return lVal.concat(rVal)
  }

  const multiDimesionsVal = function(list) {
    if (list.length > 1)
      return {
        type: DIMENSIONS,
        value: list
      }

    return list
  }

  const vendorPrefixIdVal = function(val) {
    const identPattern = /([-](webkit|moz|o|ms)[-])([0-9a-zA-Z-]*)/
    var result = val.match(identPattern)

    if (result) {
      return {
        type: 'ID',
        vendorPrefix: result[1],
        value: result[3],
        fullQuailfied: val
      }
    }

    return {
      type: 'ID',
      value: val,
      fullQuailfied: val
    }
  }

  const unitVal = function(type, val) {
    const pattern = /(([\+\-]?[0-9]+(\.[0-9]+)?)|([\+\-]?\.[0-9]+))([a-zA-Z]+)/
    var result = val.match(pattern)

    if (result) {
      return {
        type: type,
        value: parseFloat(result[1]),
        unit: result[5],
        fullQuailfied: val
      }
    }

    return {
      type: type,
      value: val,
      fullQuailfied: val
    }
  }

  const demensionUnitVal = function(val) {
    return unitVal(DIMENSION, val)
  }

  const percentageVal = function(val) {
    const pattern = /(([\+\-]?[0-9]+(\.[0-9]+)?)|([\+\-]?\.[0-9]+))([%])/
    var result = val.match(pattern)

    if (result) {
      return {
        type: PERCENTAGE,
        value: parseFloat(result[1]),
        unit: result[5],
        fullQuailfied: val
      }
    }

    return {
      type: PERCENTAGE,
      value: val,
      fullQuailfied: val
    }
  }
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:function _token(tok) { /*console.log(tok);*/ return tok; }
break;
case 1:
break;
case 2:
break;
case 3:return _token('VENDOR_PREFIX_IDENT');
break;
case 4:return _token('CALC_FUNC');
break;
case 5:return _token('URL_FUNC');
break;
case 6:return _token('URL_PREFIX_FUNC');
break;
case 7:return _token('DOMAIN_FUNC');
break;
case 8:return _token('REGEXP_FUNC');
break;
case 9:return _token('AT_CHARSET');
break;
case 10:return _token('AT_IMPORT');
break;
case 11:return _token('AT_NAMESPACE');
break;
case 12:return _token('AT_MEDIA');
break;
case 13:return _token('AT_DOCUMENT');
break;
case 14:return _token('AT_PAGE');
break;
case 15:return _token('AT_SUPPORTS');
break;
case 16:return _token('AT_FONT_FACE');
break;
case 17:return _token('AT_VIEWPORT');
break;
case 18:return _token('AT_COUNTER_STYLE');
break;
case 19:return _token('AT_FONT_FEATURE_VALUES');
break;
case 20:return _token('AT_KEYFRAMES');
break;
case 21:return _token('AT_KEYWORD');
break;
case 22:return _token('SELECTOR_CLASS_WITH_WHITESPACE');
break;
case 23:return _token('SELECTOR_ID_WITH_WHITESPACE');
break;
case 24:return _token('HASH_STRING');
break;
case 25:return _token('HEXA_NUMBER');
break;
case 26:return _token('DIMENSION');
break;
case 27:return _token('PERCENTAGE');
break;
case 28:return _token('NUMBER');
break;
case 29:return _token('UNICODE_RANGE');
break;
case 30:return _token('INCLUDE_MATCH');
break;
case 31:return _token('DASH_MATCH');
break;
case 32:return _token('PREFIX_MATCH');
break;
case 33:return _token('SUFFIX_MATCH');
break;
case 34:return _token('SUBSTRING_MATCH');
break;
case 35:return _token('COLUMN');
break;
case 36:return _token('CDO');
break;
case 37:return _token('CDC');
break;
case 38:return _token('ASSIGN_MARK');
break;
case 39:return _token('QUOTATION_MARK');
break;
case 40:return _token('NUMBER_SIGN');
break;
case 41:return _token('DOLLAR_SIGN');
break;
case 42:return _token('APOSTROPHE');
break;
case 43:return _token('LEFT_PARENTHESIS');
break;
case 44:return _token('RIGHT_PARENTHESIS');
break;
case 45:return _token('ASTERISK_WITH_WHITESPACE');
break;
case 46:return _token('ASTERISK');
break;
case 47:return _token('PLUS_SIGN');
break;
case 48:return _token('COMMA');
break;
case 49:return _token('HYPHEN_MINUS');
break;
case 50:return _token('FULL_STOP');
break;
case 51:return _token('SOLIDUS');
break;
case 52:return _token('COLON');
break;
case 53:return _token('SEMICOLON');
break;
case 54:return _token('LESS_THAN_SIGN');
break;
case 55:return _token('GREATER_THAN_SIGN');
break;
case 56:return _token('COMMERCIAL_AT');
break;
case 57:return _token('LEFT_SQUARE_BRACKET');
break;
case 58:return _token('REVERSE_SOLIDUS');
break;
case 59:return _token('RIGHT_SQUARE_BRACKET');
break;
case 60:return _token('CIRCUMFLEX_ACCENT');
break;
case 61:return _token('LEFT_CURLY_BRACKET');
break;
case 62:return _token('RIGHT_CURLY_BRACKET');
break;
case 63:return _token('VERTICAL_LINE ');
break;
case 64:return _token('TILDE');
break;
case 65:return _token('GENERAL_IDENT');
break;
case 66:return _token('GENERAL_IDENT');
break;
case 67:return _token('GENERAL_IDENT');
break;
case 68:return _token('OPERATOR_AND');
break;
case 69:return _token('OPERATOR_OR');
break;
case 70:return _token('OPERATOR_ONLY');
break;
case 71:return _token('OPERATOR_NOT');
break;
case 72:return _token('STRING');
break;
case 73:return _token('GENERAL_IDENT');
break;
case 74:return _token('N');
break;
case 75:return _token('SELECTOR_TYPE_WITH_WHITESPACE');
break;
case 76:return _token('GENERAL_IDENT');
break;
case 77:return _token('IMPORTANT');
break;
case 78:return _token('EOF');
break;
case 79:return _token(yy_.yytext);
break;
}
},
rules: [/^(?:{hack})/,/^(?:\/\*[^*]*\*+([^\/][^*]*\*+)*\/)/,/^(?:(\s)+)/,/^(?:([-](webkit|moz|o|ms\b)[-])([-]?([a-zA-Z]|([\200-\377])|((\\{h}{1,6}[ \t\r\n\f]?)|\\[ -~\200-\377]))([_]|([a-zA-Z0-9-]|([\200-\377])|((\\{h}{1,6}[ \t\r\n\f]?)|\\[ -~\200-\377])))*))/,/^(?:calc\()/,/^(?:url(\(((\s))*((([!#$%&*-~]|([\200-\377])|((\\{h}{1,6}[ \t\r\n\f]?)|\\[ -~\200-\377]))*)|(("([\t !#$%&(-~]|\\{nl}|'|([\200-\377])|((\\{h}{1,6}[ \t\r\n\f]?)|\\[ -~\200-\377]))*")|('([\t !#$%&(-~]|\\{nl}|"|([\200-\377])|((\\{h}{1,6}[ \t\r\n\f]?)|\\[ -~\200-\377]))*')))((\s))*\)))/,/^(?:url-prefix(\(((\s))*((([!#$%&*-~]|([\200-\377])|((\\{h}{1,6}[ \t\r\n\f]?)|\\[ -~\200-\377]))*)|(("([\t !#$%&(-~]|\\{nl}|'|([\200-\377])|((\\{h}{1,6}[ \t\r\n\f]?)|\\[ -~\200-\377]))*")|('([\t !#$%&(-~]|\\{nl}|"|([\200-\377])|((\\{h}{1,6}[ \t\r\n\f]?)|\\[ -~\200-\377]))*')))((\s))*\)))/,/^(?:domain(\(((\s))*((([!#$%&*-~]|([\200-\377])|((\\{h}{1,6}[ \t\r\n\f]?)|\\[ -~\200-\377]))*)|(("([\t !#$%&(-~]|\\{nl}|'|([\200-\377])|((\\{h}{1,6}[ \t\r\n\f]?)|\\[ -~\200-\377]))*")|('([\t !#$%&(-~]|\\{nl}|"|([\200-\377])|((\\{h}{1,6}[ \t\r\n\f]?)|\\[ -~\200-\377]))*')))((\s))*\)))/,/^(?:regexp\(((\s))*(("([\t !#$%&(-~]|\\{nl}|'|([\200-\377])|((\\{h}{1,6}[ \t\r\n\f]?)|\\[ -~\200-\377]))*")|('([\t !#$%&(-~]|\\{nl}|"|([\200-\377])|((\\{h}{1,6}[ \t\r\n\f]?)|\\[ -~\200-\377]))*'))((\s))*\))/,/^(?:@charset\b)/,/^(?:@import\b)/,/^(?:@namespace\b)/,/^(?:@media\b)/,/^(?:@document\b)/,/^(?:@page\b)/,/^(?:@supports\b)/,/^(?:@font-face\b)/,/^(?:@viewport\b)/,/^(?:@counter-style\b)/,/^(?:@font-feature-values\b)/,/^(?:@([-](webkit|moz|o|ms\b)[-])?keyframes\b)/,/^(?:[@]([-]?([a-zA-Z]|([\200-\377])|((\\{h}{1,6}[ \t\r\n\f]?)|\\[ -~\200-\377]))([_]|([a-zA-Z0-9-]|([\200-\377])|((\\{h}{1,6}[ \t\r\n\f]?)|\\[ -~\200-\377])))*))/,/^(?:[.]([-]?([a-zA-Z]|([\200-\377])|((\\{h}{1,6}[ \t\r\n\f]?)|\\[ -~\200-\377]))([_]|([a-zA-Z0-9-]|([\200-\377])|((\\{h}{1,6}[ \t\r\n\f]?)|\\[ -~\200-\377])))*)(\s)+)/,/^(?:[#]([-]?([a-zA-Z]|([\200-\377])|((\\{h}{1,6}[ \t\r\n\f]?)|\\[ -~\200-\377]))([_]|([a-zA-Z0-9-]|([\200-\377])|((\\{h}{1,6}[ \t\r\n\f]?)|\\[ -~\200-\377])))*)(\s)+)/,/^(?:[#]([-]?([a-zA-Z]|([\200-\377])|((\\{h}{1,6}[ \t\r\n\f]?)|\\[ -~\200-\377]))([_]|([a-zA-Z0-9-]|([\200-\377])|((\\{h}{1,6}[ \t\r\n\f]?)|\\[ -~\200-\377])))*))/,/^(?:[#]([0-9a-fA-F])+)/,/^(?:(([\+\-]?[0-9]+(\.[0-9]+)?)|([\+\-]?\.[0-9]+))([-]?([a-zA-Z]|([\200-\377])|((\\{h}{1,6}[ \t\r\n\f]?)|\\[ -~\200-\377]))([_]|([a-zA-Z0-9-]|([\200-\377])|((\\{h}{1,6}[ \t\r\n\f]?)|\\[ -~\200-\377])))*))/,/^(?:(([\+\-]?[0-9]+(\.[0-9]+)?)|([\+\-]?\.[0-9]+))%)/,/^(?:(([\+\-]?[0-9]+(\.[0-9]+)?)|([\+\-]?\.[0-9]+)))/,/^(?:[Uu]\+(\?{1,6}|{h}(\?{0,5}|{h}(\?{0,4}|{h}(\?{0,3}|{h}(\?{0,2}|{h}(\??|{h})))))))/,/^(?:~=)/,/^(?:\|=)/,/^(?:\^=)/,/^(?:\$=)/,/^(?:\*=)/,/^(?:\|\|)/,/^(?:<!--)/,/^(?:-->)/,/^(?:=)/,/^(?:\\)/,/^(?:#)/,/^(?:\$)/,/^(?:‘)/,/^(?:\()/,/^(?:\))/,/^(?:[*](\s)+)/,/^(?:[*])/,/^(?:\+)/,/^(?:,)/,/^(?:-)/,/^(?:\.)/,/^(?:\/)/,/^(?::)/,/^(?:;)/,/^(?:<)/,/^(?:>)/,/^(?:@)/,/^(?:\[)/,/^(?:\\)/,/^(?:\])/,/^(?:\^)/,/^(?:\{)/,/^(?:\})/,/^(?:\|)/,/^(?:~)/,/^(?:((and\b)|(or\b)|(only\b)|(not\b))([_]|([a-zA-Z0-9-]|([\200-\377])|((\\{h}{1,6}[ \t\r\n\f]?)|\\[ -~\200-\377])))+)/,/^(?:{media_type}([_]|([a-zA-Z0-9-]|([\200-\377])|((\\{h}{1,6}[ \t\r\n\f]?)|\\[ -~\200-\377])))+)/,/^(?:{media_feature}([_]|([a-zA-Z0-9-]|([\200-\377])|((\\{h}{1,6}[ \t\r\n\f]?)|\\[ -~\200-\377])))+)/,/^(?:(and\b))/,/^(?:(or\b))/,/^(?:(only\b))/,/^(?:(not\b))/,/^(?:(("([\t !#$%&(-~]|\\{nl}|'|([\200-\377])|((\\{h}{1,6}[ \t\r\n\f]?)|\\[ -~\200-\377]))*")|('([\t !#$%&(-~]|\\{nl}|"|([\200-\377])|((\\{h}{1,6}[ \t\r\n\f]?)|\\[ -~\200-\377]))*')))/,/^(?:n([-]?([a-zA-Z]|([\200-\377])|((\\{h}{1,6}[ \t\r\n\f]?)|\\[ -~\200-\377]))([_]|([a-zA-Z0-9-]|([\200-\377])|((\\{h}{1,6}[ \t\r\n\f]?)|\\[ -~\200-\377])))*))/,/^(?:n\b)/,/^(?:([-]?([a-zA-Z]|([\200-\377])|((\\{h}{1,6}[ \t\r\n\f]?)|\\[ -~\200-\377]))([_]|([a-zA-Z0-9-]|([\200-\377])|((\\{h}{1,6}[ \t\r\n\f]?)|\\[ -~\200-\377])))*)(\s)+)/,/^(?:([-]?([a-zA-Z]|([\200-\377])|((\\{h}{1,6}[ \t\r\n\f]?)|\\[ -~\200-\377]))([_]|([a-zA-Z0-9-]|([\200-\377])|((\\{h}{1,6}[ \t\r\n\f]?)|\\[ -~\200-\377])))*))/,/^(?:!important\b)/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = cssparser;
exports.Parser = cssparser.Parser;
exports.parse = function () { return cssparser.parse.apply(cssparser, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}