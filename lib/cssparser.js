/* parser generated by jison 0.4.17 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var cssparser = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,4],$V1=[1,5],$V2=[1,22],$V3=[1,23],$V4=[1,24],$V5=[1,43],$V6=[1,28],$V7=[1,46],$V8=[1,44],$V9=[1,19],$Va=[1,45],$Vb=[1,48],$Vc=[1,30],$Vd=[1,39],$Ve=[1,34],$Vf=[1,35],$Vg=[1,37],$Vh=[1,38],$Vi=[1,49],$Vj=[1,40],$Vk=[1,41],$Vl=[1,42],$Vm=[1,47],$Vn=[5,7,8,20,22,25,34,37,46,48,56,57,68,72,73,115,116,118,119,120,121,122,123,124],$Vo=[1,54],$Vp=[5,7,8,20,22,25,34,36,37,46,48,56,57,68,72,73,115,116,118,119,120,121,122,123,124],$Vq=[35,51],$Vr=[35,51,70],$Vs=[1,62],$Vt=[1,61],$Vu=[1,63],$Vv=[1,67],$Vw=[1,71],$Vx=[1,74],$Vy=[1,75],$Vz=[1,76],$VA=[35,51,68,70,72,73,89,110,111,115,116,118,119,120,121,122,123,124],$VB=[1,89],$VC=[1,91],$VD=[1,88],$VE=[1,94],$VF=[1,95],$VG=[1,96],$VH=[1,97],$VI=[1,101],$VJ=[1,102],$VK=[1,105],$VL=[1,111],$VM=[1,123],$VN=[1,124],$VO=[68,72,73,115,116,118,119,120,121,122,123,124],$VP=[14,63,66,97,118,119,121],$VQ=[14,35,36,51,52,63,64,66,68,70,72,73,86,87,89,90,91,105,110,111,115,116,118,119,120,121,122,123,124,126,127,128,129,130,131,136,137,140,141],$VR=[1,135],$VS=[1,139],$VT=[35,118,119,121,141],$VU=[2,176],$VV=[14,35],$VW=[14,35,51],$VX=[1,143],$VY=[118,119,121],$VZ=[35,64,65],$V_=[35,68],$V$=[1,165],$V01=[5,7,8,20,22,25,34,35,36,37,46,48,56,57,68,72,73,115,116,118,119,120,121,122,123,124,141],$V11=[20,22,25,34,36,37,46,48,56,57,68,72,73,115,116,118,119,120,121,122,123,124],$V21=[14,35,51,64],$V31=[63,66],$V41=[1,207],$V51=[1,208],$V61=[1,203],$V71=[52,118,119,121,136,137,140,141,144],$V81=[52,63,68,70,72,73,87,90,115,116,118,119,120,121,122,123,124,135,136,137,140,141],$V91=[1,230],$Va1=[1,227],$Vb1=[1,228],$Vc1=[1,229],$Vd1=[35,36,118,119,121,141],$Ve1=[70,126],$Vf1=[14,36,51,52,63,70,72,73,87,89,90,91,105,115,116,118,119,121,123,126,136,137,140,141],$Vg1=[14,36],$Vh1=[14,36,51,105],$Vi1=[1,243],$Vj1=[1,244],$Vk1=[1,245],$Vl1=[1,246],$Vm1=[1,247],$Vn1=[14,36,51,52,63,70,72,73,87,89,90,91,105,115,116,118,119,121,123,136,137,140,141],$Vo1=[52,63,87,115,116,118,119,121,123,136,137,140,141],$Vp1=[51,70],$Vq1=[70,72,73,89,90,91];
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"stylesheet":3,"stylesheet_list":4,"EOF":5,"stylesheet_component":6,"CDO":7,"CDC":8,"QualifiedRule":9,"at_rule":10,"rule_list":11,"rule_list_component":12,"at_rule_simple":13,"SEMICOLON":14,"at_rule_nested":15,"at_rule_font_face":16,"at_rule_charset":17,"at_rule_import":18,"at_rule_namespace":19,"AT_CHARSET":20,"StringVal":21,"AT_IMPORT":22,"UrlOrStringVal":23,"MediaQueryList":24,"AT_NAMESPACE":25,"IDENT":26,"at_rule_nested_frontpart":27,"rule_block":28,"at_rule_keyframes":29,"at_rule_page":30,"at_rule_media":31,"at_rule_document":32,"at_rule_supports":33,"AT_MEDIA":34,"LEFT_CURLY_BRACKET":35,"RIGHT_CURLY_BRACKET":36,"AT_KEYFRAMES":37,"keyframes_name":38,"keyframes_block":39,"keyframes_block_list":40,"keyframes_selector":41,"DeclarationList":42,"IdentVal":43,"PercentageVal":44,"at_rule_page_frontpart":45,"AT_PAGE":46,"SelectorPseudoClassList":47,"AT_DOCUMENT":48,"AtDocumentFuncValList":49,"AtDocumentFuncVal":50,"COMMA":51,"URL_FUNC":52,"URL_PREFIX_FUNC":53,"DOMAIN_FUNC":54,"REGEXP_FUNC":55,"AT_FONT_FACE":56,"AT_SUPPORTS":57,"supports_expression_list":58,"supports_expression":59,"supports_and_or_expression":60,"OperatorAndOr":61,"supports_expression_body":62,"OPERATOR_NOT":63,"OPERATOR_AND":64,"OPERATOR_OR":65,"LEFT_PARENTHESIS":66,"ComponentName":67,"COLON":68,"DeclarationPropValList":69,"RIGHT_PARENTHESIS":70,"PropertyName":71,"ASTERISK":72,"ASTERISK_WITH_WHITESPACE":73,"PropertyValue":74,"PropertyValueItemSequence":75,"PropertyValueItem":76,"GenericPropertyValueItem":77,"CalcOperator":78,"UrlVal":79,"FunctionVal":80,"GenericNumericVal":81,"HashVal":82,"CalcFunction":83,"FUNCTION":84,"FunctionParameters":85,"ASSIGN_MARK":86,"CALC_FUNC":87,"CalcExpression":88,"PLUS_SIGN":89,"HYPHEN_MINUS":90,"SOLIDUS":91,"MediaQueryGroup":92,"MediaQuery":93,"MediaQueryAndExpressionList":94,"OnlyNot":95,"MediaQueryExpressionList":96,"OPERATOR_ONLY":97,"MediaQueryExpression":98,"MediaQueryAndExpression":99,"MediaFeature":100,"GenericVal":101,"SelectorList":102,"Declaration":103,"DeclarationComponent":104,"IMPORTANT":105,"SelectorGroup":106,"Selector":107,"SelectorCombinator":108,"DescendantSelector":109,"GREATER_THAN_SIGN":110,"TILDE":111,"SelectorAttr":112,"SelectorPseudoClass":113,"SelectorPseudoElement":114,"HASH_STRING":115,"HEXA_NUMBER":116,"ClassSelector":117,"GENERAL_IDENT":118,"VENDOR_PREFIX_IDENT":119,"FULL_STOP":120,"SELECTOR_TYPE_WITH_WHITESPACE":121,"SELECTOR_CLASS_WITH_WHITESPACE":122,"SELECTOR_ID_WITH_WHITESPACE":123,"LEFT_SQUARE_BRACKET":124,"SelectorAttrOperator":125,"RIGHT_SQUARE_BRACKET":126,"INCLUDE_MATCH":127,"DASH_MATCH":128,"PREFIX_MATCH":129,"SUFFIX_MATCH":130,"SUBSTRING_MATCH":131,"PseudoClassFunc":132,"PseudoClassFuncParam":133,"PseudoClassFuncParam_an_plus_b":134,"N":135,"NUMBER":136,"DIMENSION":137,"NumberVal":138,"DimensionVal":139,"STRING":140,"PERCENTAGE":141,"IdOrUrlOrStringVal":142,"NumericVal":143,"HexaNumericVal":144,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",7:"CDO",8:"CDC",14:"SEMICOLON",20:"AT_CHARSET",22:"AT_IMPORT",25:"AT_NAMESPACE",34:"AT_MEDIA",35:"LEFT_CURLY_BRACKET",36:"RIGHT_CURLY_BRACKET",37:"AT_KEYFRAMES",46:"AT_PAGE",48:"AT_DOCUMENT",51:"COMMA",52:"URL_FUNC",53:"URL_PREFIX_FUNC",54:"DOMAIN_FUNC",55:"REGEXP_FUNC",56:"AT_FONT_FACE",57:"AT_SUPPORTS",63:"OPERATOR_NOT",64:"OPERATOR_AND",65:"OPERATOR_OR",66:"LEFT_PARENTHESIS",68:"COLON",69:"DeclarationPropValList",70:"RIGHT_PARENTHESIS",72:"ASTERISK",73:"ASTERISK_WITH_WHITESPACE",86:"ASSIGN_MARK",87:"CALC_FUNC",89:"PLUS_SIGN",90:"HYPHEN_MINUS",91:"SOLIDUS",97:"OPERATOR_ONLY",105:"IMPORTANT",110:"GREATER_THAN_SIGN",111:"TILDE",115:"HASH_STRING",116:"HEXA_NUMBER",118:"GENERAL_IDENT",119:"VENDOR_PREFIX_IDENT",120:"FULL_STOP",121:"SELECTOR_TYPE_WITH_WHITESPACE",122:"SELECTOR_CLASS_WITH_WHITESPACE",123:"SELECTOR_ID_WITH_WHITESPACE",124:"LEFT_SQUARE_BRACKET",126:"RIGHT_SQUARE_BRACKET",127:"INCLUDE_MATCH",128:"DASH_MATCH",129:"PREFIX_MATCH",130:"SUFFIX_MATCH",131:"SUBSTRING_MATCH",135:"N",136:"NUMBER",137:"DIMENSION",140:"STRING",141:"PERCENTAGE",144:"HexaNumericVal"},
productions_: [0,[3,2],[4,1],[4,2],[6,1],[6,1],[6,1],[6,1],[11,1],[11,2],[12,1],[12,1],[10,2],[10,1],[10,1],[13,1],[13,1],[13,1],[17,2],[18,2],[18,3],[19,2],[19,3],[15,2],[15,1],[15,1],[27,1],[27,1],[27,1],[31,2],[28,3],[28,2],[29,3],[39,2],[39,3],[39,2],[40,1],[40,2],[38,1],[38,1],[41,1],[41,1],[30,2],[45,1],[45,2],[32,2],[49,1],[49,3],[50,1],[50,1],[50,1],[50,1],[16,2],[33,2],[58,1],[58,2],[60,2],[59,1],[59,2],[61,1],[61,1],[62,5],[71,1],[71,2],[71,2],[74,1],[74,3],[75,1],[76,1],[76,2],[76,3],[77,1],[77,1],[77,1],[77,1],[77,1],[77,1],[77,1],[80,2],[80,3],[84,2],[84,2],[85,1],[85,3],[85,3],[83,2],[83,3],[88,1],[88,3],[78,1],[78,1],[78,1],[78,1],[78,1],[24,1],[92,1],[92,3],[93,1],[93,2],[93,2],[93,3],[93,1],[95,1],[95,1],[96,2],[96,1],[94,2],[94,1],[99,2],[98,3],[98,5],[100,1],[9,2],[42,3],[42,2],[103,1],[103,2],[103,3],[104,4],[104,3],[102,1],[102,3],[106,1],[106,2],[106,3],[106,1],[106,2],[106,3],[108,1],[108,1],[108,1],[107,1],[107,1],[107,1],[107,1],[107,1],[107,1],[107,1],[107,1],[107,1],[117,2],[117,2],[117,2],[117,2],[117,2],[109,1],[109,1],[109,1],[109,1],[112,5],[112,3],[125,1],[125,1],[125,1],[125,1],[125,1],[125,1],[114,3],[47,1],[47,2],[113,2],[113,2],[132,2],[132,3],[133,1],[133,1],[134,1],[134,3],[134,4],[134,1],[134,1],[134,3],[138,1],[139,1],[21,1],[79,1],[43,1],[82,1],[82,1],[82,1],[44,1],[23,1],[23,1],[142,1],[142,1],[142,1],[81,1],[81,1],[81,1],[143,1],[143,1],[101,1],[101,1],[26,1],[26,1],[26,1],[67,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:

      this.$ = {
        type: 'STYLESHEET',
        value: $$[$0-1]
      }

      return this.$
    
break;
case 2:

      this.$ = []
      if ($$[$0])
        this.$.push($$[$0])
    
break;
case 3:

      if ($$[$0-1] == null) {
        this.$ = $$[$0]
        return
      }

      this.$ = [$$[$0-1]].concat($$[$0])
    
break;
case 4: case 5: case 6: case 7: case 10: case 11: case 68:
this.$ = $$[$0];
break;
case 8: case 82: case 95: case 105: case 107:
this.$ = [$$[$0]];
break;
case 9:
this.$ = [$$[$0-1]].concat($$[$0]);
break;
case 18: case 19: case 21:
this.$ = atRule($$[$0-1], $$[$0]);
break;
case 20:
this.$ = atRule($$[$0-2], $$[$0-1], 'mediaQueries', $$[$0]);
break;
case 22:
this.$ = atRule($$[$0-2], $$[$0], 'prefix', $$[$0-1]);
break;
case 23:
this.$ = addProp($$[$0-1], 'nestedRules', $$[$0]);
break;
case 29:
this.$ = atRule($$[$0-1], null, 'mediaQueries', $$[$0]);
break;
case 30: case 34:
this.$ = $$[$0-1];
break;
case 31: case 33:
this.$ = null;
break;
case 32:
this.$ = atRule($$[$0-2], $$[$0], 'name', $$[$0-1]);
break;
case 35:
this.$ = keyframesVal($$[$0-1], $$[$0]);
break;
case 37: case 55: case 69: case 104: case 106:
this.$ = merge($$[$0-1], $$[$0]);
break;
case 42:
this.$ = addProp($$[$0-1], 'value', $$[$0]);
break;
case 43:
this.$ = atRule($$[$0], null);
break;
case 44:
this.$ = atRule($$[$0-1], null, 'pseudoClasses', $$[$0]);
break;
case 45:
this.$ = atRule($$[$0-1], null, 'value', functionVal($$[$0]));
break;
case 47: case 66: case 83: case 117:
this.$ = merge($$[$0-2], $$[$0]);
break;
case 48:
this.$ = functionVal('url', $$[$0]);
break;
case 49:
this.$ = functionVal('url-prefix', $$[$0]);
break;
case 50:
this.$ = functionVal('domain', $$[$0]);
break;
case 51:
this.$ = functionVal('regexp', $$[$0]);
break;
case 52:
this.$ = { type: FONT_FACE, value: $$[$0] };
break;
case 53:
this.$ = atRule($$[$0-1], null, 'expressions', $$[$0]);
break;
case 56:
this.$ = { operator: $$[$0-1], expression: $$[$0] };
break;
case 57:
this.$ = { value: $$[$0] };
break;
case 58:
this.$ = { value: $$[$0], not: true };
break;
case 61:
this.$ = { property: $$[$0-3], value: $$[$0-1] };
break;
case 63:
this.$ =  addProp($$[$0], 'asteriskHack', true);
break;
case 64:
this.$ =  addProp($$[$0].trimRight(), 'asteriskHack', true);
break;
case 67:
this.$ = sequencialVal($$[$0]);
break;
case 70:

      this.$ = {
        type: EXPRESSION,
        lhs: $$[$0-2],
        operator: $$[$0-1],
        lhs: $$[$0]
      }
    
break;
case 78: case 162:
this.$ = functionVal($$[$0-1]);
break;
case 79: case 163:
this.$ = functionVal($$[$0-2], $$[$0-1]);
break;
case 84:
this.$ = [operationVal($$[$0-1], $$[$0-2], $$[$0])];
break;
case 85:
this.$ = functionVal('calc');
break;
case 86:
this.$ = functionVal('calc', $$[$0-1]);
break;
case 88:
this.$ = operationVal($$[$0-1], $$[$0-2], $$[$0]);
break;
case 90: case 195:
this.$ = $$[$0].trimRight();
break;
case 94:
this.$ = { type: MEDIA_QUERIES, value: $$[$0] };
break;
case 96:
this.$ = $$[$0].concat([$$[$0-2]]);
break;
case 97:
this.$ = mediaQuery(null, $$[$0]);
break;
case 98:
this.$ = mediaQuery(null, $$[$0-1], $$[$0]);
break;
case 99:
this.$ = mediaQuery($$[$0-1], $$[$0]);
break;
case 100:
this.$ = mediaQuery($$[$0-2], $$[$0-1], $$[$0]);
break;
case 101:
this.$ = mediaQuery(null, null, $$[$0]);
break;
case 108:
this.$ = addProp($$[$0], 'operator', $$[$0-1]);
break;
case 109:
this.$ = mediaQueryExpr($$[$0-1]);
break;
case 110:
this.$ = mediaQueryExpr($$[$0-3], $$[$0-1]);
break;
case 112:

        this.$ = {
          type: CSS_RULE,
          selectors: $$[$0-1],
          value: $$[$0]
        }
    
break;
case 113:
this.$ = declarations(merge($$[$0-1], []));
break;
case 114:
this.$ = [];
break;
case 118:
this.$ = cssDeclarationVal($$[$0-3], $$[$0-1], $$[$0]);
break;
case 119:
this.$ = cssDeclarationVal($$[$0-2], $$[$0]);
break;
case 120:
this.$ = merge(defVariable(SELECTOR, removeTailingSelectorCombinator($$[$0])), []);
break;
case 121:
this.$ = merge($$[$0-2], defVariable(SELECTOR, removeTailingSelectorCombinator($$[$0])));
break;
case 123:

      this.$ = $$[$0-1]
      this.$.nextSelector = $$[$0]
    
break;
case 124: case 127:

      this.$ = $$[$0-2]
      this.$.nextSelector = $$[$0-1]
      this.$.nextSelector.nextSelector = $$[$0]
    
break;
case 126:

      this.$ = $$[$0-1]
      this.$.nextSelector = selectorCombinator("DESCENDANT", " ")
      this.$.nextSelector.nextSelector = $$[$0]
    
break;
case 128:
this.$ = selectorCombinator("CHILD", $$[$0]);
break;
case 129:
this.$ = selectorCombinator("ADJACENT_SIBLING", $$[$0]);
break;
case 130:
this.$ = selectorCombinator("GENERAL_SIBLING", $$[$0]);
break;
case 131:
this.$ = selectorComponent(UNIVERSAL_SELECTOR, $$[$0]);
break;
case 133:
this.$ = selectorComponent(PSEUDO_CLASS, $$[$0]);
break;
case 134:
this.$ = selectorComponent(PSEUDO_ELEMENT, $$[$0]);
break;
case 135: case 136:
this.$ = selectorComponent(ID_SELECTOR, hashVal($$[$0]));
break;
case 138: case 139:
this.$ = selectorComponent(TYPE_SELECTOR, vendorPrefixIdVal($$[$0]));
break;
case 140: case 141: case 142: case 143: case 144:
this.$ = selectorComponent(CLASS_SELECTOR, $$[$0-1] + $$[$0]);
break;
case 145:
this.$ = selectorComponent(UNIVERSAL_SELECTOR, $$[$0].trimRight());
break;
case 146:
this.$ = selectorComponent(TYPE_SELECTOR, $$[$0].trimRight());
break;
case 147:
this.$ = selectorComponent(CLASS_SELECTOR, $$[$0].trimRight());
break;
case 148:
this.$ = selectorComponent(ID_SELECTOR, hashVal($$[$0].trimRight()));
break;
case 149:

      this.$ = {
        type: ATTRIBUTE,
        value: $$[$0-3],
        expression: {
          type: EXPRESSION,
          operator: $$[$0-2],
          value: $$[$0-1]
        }
      }
    
break;
case 150:

      this.$ = selectorComponent(ATTR_SELECTOR, {
        type: ATTRIBUTE,
        value: $$[$0-1]
      })
    
break;
case 151:
this.$ = defVariable('include', $$[$0]);
break;
case 152:
this.$ = defVariable('dash', $$[$0]);
break;
case 153:
this.$ = defVariable('prefix', $$[$0]);
break;
case 154:
this.$ = defVariable('suffix', $$[$0]);
break;
case 155:
this.$ = defVariable('substring', $$[$0]);
break;
case 156:
this.$ = defVariable('equal', $$[$0]);
break;
case 157:

      this.$ = $$[$0]
      this.$.prefix = $$[$0-2] + $$[$0-1]
    
break;
case 158:
this.$ = [defVariable(PSEUDO_CLASS, $$[$0])];
break;
case 159:
this.$ = merge($$[$0-1], defVariable(PSEUDO_CLASS, $$[$0-1]));
break;
case 160: case 161:
this.$ = { prefix: $$[$0-1], name: $$[$0] };
break;
case 172:
this.$ = numberVal($$[$0]);
break;
case 173:
this.$ = dimensionUnitVal($$[$0]);
break;
case 174:
this.$ = stringVal($$[$0]);
break;
case 175:
this.$ = urlVal($$[$0]);
break;
case 176: case 196:
this.$ = vendorPrefixIdVal($$[$0]);
break;
case 177: case 178:
this.$ = hashVal($$[$0]);
break;
case 179:
this.$ = hashVal($$[$0].trimRight());
break;
case 180:
this.$ = percentageVal($$[$0]);
break;
}
},
table: [{3:1,4:2,6:3,7:$V0,8:$V1,9:6,10:7,13:9,15:10,16:11,17:13,18:14,19:15,20:$V2,22:$V3,25:$V4,27:16,29:17,30:18,31:25,32:26,33:27,34:$V5,37:$V6,45:29,46:$V7,48:$V8,56:$V9,57:$Va,68:$Vb,72:$Vc,73:$Vd,102:8,106:12,107:20,109:21,112:31,113:32,114:33,115:$Ve,116:$Vf,117:36,118:$Vg,119:$Vh,120:$Vi,121:$Vj,122:$Vk,123:$Vl,124:$Vm},{1:[3]},{5:[1,50]},{4:51,5:[2,2],6:3,7:$V0,8:$V1,9:6,10:7,13:9,15:10,16:11,17:13,18:14,19:15,20:$V2,22:$V3,25:$V4,27:16,29:17,30:18,31:25,32:26,33:27,34:$V5,37:$V6,45:29,46:$V7,48:$V8,56:$V9,57:$Va,68:$Vb,72:$Vc,73:$Vd,102:8,106:12,107:20,109:21,112:31,113:32,114:33,115:$Ve,116:$Vf,117:36,118:$Vg,119:$Vh,120:$Vi,121:$Vj,122:$Vk,123:$Vl,124:$Vm},o($Vn,[2,4]),o($Vn,[2,5]),o($Vn,[2,6]),o($Vn,[2,7]),{35:$Vo,42:52,51:[1,53]},{14:[1,55]},o($Vp,[2,13]),o($Vp,[2,14]),o($Vq,[2,120]),{14:[2,15]},{14:[2,16]},{14:[2,17]},{28:56,35:[1,57]},o($Vp,[2,24]),o($Vp,[2,25]),{35:$Vo,42:58},o($Vr,[2,122],{107:20,109:21,112:31,113:32,114:33,117:36,106:59,108:60,68:$Vb,72:$Vc,73:$Vd,89:$Vs,110:$Vt,111:$Vu,115:$Ve,116:$Vf,118:$Vg,119:$Vh,120:$Vi,121:$Vj,122:$Vk,123:$Vl,124:$Vm}),o($Vr,[2,125],{107:20,109:21,112:31,113:32,114:33,117:36,106:64,108:65,68:$Vb,72:$Vc,73:$Vd,89:$Vs,110:$Vt,111:$Vu,115:$Ve,116:$Vf,118:$Vg,119:$Vh,120:$Vi,121:$Vj,122:$Vk,123:$Vl,124:$Vm}),{21:66,140:$Vv},{21:69,23:68,52:$Vw,79:70,140:$Vv},{21:69,23:72,26:73,52:$Vw,79:70,118:$Vx,119:$Vy,121:$Vz,140:$Vv},{35:[2,26]},{35:[2,27]},{35:[2,28]},{21:79,26:80,38:77,43:78,118:$Vx,119:$Vy,121:$Vz,140:$Vv},{35:$Vo,42:81},o($VA,[2,131]),o($VA,[2,132]),o($VA,[2,133]),o($VA,[2,134]),o($VA,[2,135]),o($VA,[2,136]),o($VA,[2,137]),o($VA,[2,138]),o($VA,[2,139]),o($VA,[2,145]),o($VA,[2,146]),o($VA,[2,147]),o($VA,[2,148]),{24:82,26:85,63:$VB,66:$VC,92:83,93:84,95:86,96:87,97:$VD,98:90,118:$Vx,119:$Vy,121:$Vz},{49:92,50:93,52:$VE,53:$VF,54:$VG,55:$VH},{58:98,59:99,62:100,63:$VI,66:$VJ},{35:[2,43],47:103,68:$VK,113:104},{26:106,118:$Vx,119:$Vy,121:$Vz},{26:107,63:$VL,68:[1,109],84:110,118:$Vx,119:$Vy,121:$Vz,132:108},{26:112,63:[1,116],64:[1,113],65:[1,114],97:[1,115],118:$Vx,119:$Vy,121:$Vz},{1:[2,1]},{5:[2,3]},o($Vp,[2,112]),{68:$Vb,72:$Vc,73:$Vd,106:117,107:20,109:21,112:31,113:32,114:33,115:$Ve,116:$Vf,117:36,118:$Vg,119:$Vh,120:$Vi,121:$Vj,122:$Vk,123:$Vl,124:$Vm},{26:80,36:[1,119],43:122,71:121,72:$VM,73:$VN,103:118,104:120,118:$Vx,119:$Vy,121:$Vz},o($Vp,[2,12]),o($Vp,[2,23]),{9:128,10:129,11:125,12:127,13:9,15:10,16:11,17:13,18:14,19:15,20:$V2,22:$V3,25:$V4,27:16,29:17,30:18,31:25,32:26,33:27,34:$V5,36:[1,126],37:$V6,45:29,46:$V7,48:$V8,56:$V9,57:$Va,68:$Vb,72:$Vc,73:$Vd,102:8,106:12,107:20,109:21,112:31,113:32,114:33,115:$Ve,116:$Vf,117:36,118:$Vg,119:$Vh,120:$Vi,121:$Vj,122:$Vk,123:$Vl,124:$Vm},o($Vp,[2,52]),o($Vr,[2,123]),{68:$Vb,72:$Vc,73:$Vd,106:130,107:20,109:21,112:31,113:32,114:33,115:$Ve,116:$Vf,117:36,118:$Vg,119:$Vh,120:$Vi,121:$Vj,122:$Vk,123:$Vl,124:$Vm},o($VO,[2,128]),o($VO,[2,129]),o($VO,[2,130]),o($Vr,[2,126]),{68:$Vb,72:$Vc,73:$Vd,106:131,107:20,109:21,112:31,113:32,114:33,115:$Ve,116:$Vf,117:36,118:$Vg,119:$Vh,120:$Vi,121:$Vj,122:$Vk,123:$Vl,124:$Vm},{14:[2,18]},o([14,35,36,51,52,63,66,70,72,73,87,89,90,91,97,105,115,116,118,119,121,123,126,136,137,140,141],[2,174]),{14:[2,19],24:132,26:85,63:$VB,66:$VC,92:83,93:84,95:86,96:87,97:$VD,98:90,118:$Vx,119:$Vy,121:$Vz},o($VP,[2,181]),o($VP,[2,182]),o([14,36,51,52,63,66,70,72,73,87,89,90,91,97,105,115,116,118,119,121,123,126,136,137,140,141],[2,175]),{14:[2,21]},{21:69,23:133,52:$Vw,79:70,140:$Vv},o($VQ,[2,193]),o($VQ,[2,194]),o($VQ,[2,195]),{26:80,35:$VR,39:134,41:136,43:137,44:138,118:$Vx,119:$Vy,121:$Vz,141:$VS},o($VT,[2,38]),o($VT,[2,39]),o([35,51,68,70,72,73,89,110,111,115,116,118,119,120,121,122,123,124,126,141],$VU),o($Vp,[2,42]),{35:[2,29]},o($VV,[2,94]),o($VV,[2,95],{51:[1,140]}),o($VW,[2,97],{94:141,99:142,64:$VX}),{26:144,118:$Vx,119:$Vy,121:$Vz},o($VW,[2,101]),o($VY,[2,102]),o($VY,[2,103]),o($VW,[2,105],{99:142,94:145,64:$VX}),{26:80,43:147,100:146,118:$Vx,119:$Vy,121:$Vz},{35:[2,45],51:[1,148]},o($Vq,[2,46]),o($Vq,[2,48]),o($Vq,[2,49]),o($Vq,[2,50]),o($Vq,[2,51]),{35:[2,53],60:149,61:150,64:[1,151],65:[1,152]},o($VZ,[2,54]),o($VZ,[2,57]),{62:153,66:$VJ},{26:155,67:154,118:$Vx,119:$Vy,121:$Vz},{35:[2,44],68:$VK,113:156},o($V_,[2,158]),{26:107,63:$VL,84:110,118:$Vx,119:$Vy,121:$Vz,132:108},{86:[1,164],125:157,126:[1,158],127:[1,159],128:[1,160],129:[1,161],130:[1,162],131:[1,163]},o($VA,[2,160],{66:$V$}),o($VA,[2,161]),{26:80,43:166,118:$Vx,119:$Vy,121:$Vz},{68:$Vb,70:[1,167],72:$Vc,73:$Vd,90:[1,172],106:169,107:20,109:21,112:31,113:32,114:33,115:$Ve,116:$Vf,117:36,118:$Vg,119:$Vh,120:$Vi,121:$Vj,122:$Vk,123:$Vl,124:$Vm,133:168,134:170,135:[1,171],136:[1,173],137:[1,174]},{66:[1,175]},o($VA,[2,140]),o($VA,[2,141]),o($VA,[2,142]),o($VA,[2,143]),o($VA,[2,144]),o($Vq,[2,121]),{36:[1,176]},o($V01,[2,114]),{14:[1,177],36:[2,115]},{68:[1,178]},{68:[2,62]},{26:80,43:179,118:$Vx,119:$Vy,121:$Vz},{26:80,43:180,118:$Vx,119:$Vy,121:$Vz},{36:[1,181]},o($Vp,[2,31]),{9:128,10:129,11:182,12:127,13:9,15:10,16:11,17:13,18:14,19:15,20:$V2,22:$V3,25:$V4,27:16,29:17,30:18,31:25,32:26,33:27,34:$V5,36:[2,8],37:$V6,45:29,46:$V7,48:$V8,56:$V9,57:$Va,68:$Vb,72:$Vc,73:$Vd,102:8,106:12,107:20,109:21,112:31,113:32,114:33,115:$Ve,116:$Vf,117:36,118:$Vg,119:$Vh,120:$Vi,121:$Vj,122:$Vk,123:$Vl,124:$Vm},o($V11,[2,10]),o($V11,[2,11]),o($Vr,[2,124]),o($Vr,[2,127]),{14:[2,20]},{14:[2,22]},o($Vp,[2,32]),{26:80,35:$VR,36:[1,183],39:185,40:184,41:136,43:137,44:138,118:$Vx,119:$Vy,121:$Vz,141:$VS},{35:$Vo,42:186},{35:[2,40]},{35:[2,41]},o([14,35,36,51,52,63,70,72,73,87,89,90,91,105,115,116,118,119,121,123,126,136,137,140,141],[2,180]),{26:85,63:$VB,66:$VC,92:187,93:84,95:86,96:87,97:$VD,98:90,118:$Vx,119:$Vy,121:$Vz},o($VW,[2,98],{99:188,64:$VX}),o($V21,[2,107]),{66:$VC,98:189},o($VW,[2,99],{99:142,94:190,64:$VX}),o($VW,[2,104],{99:188,64:$VX}),{68:[1,192],70:[1,191]},o([68,70],[2,111]),{50:193,52:$VE,53:$VF,54:$VG,55:$VH},o($VZ,[2,55]),{59:194,62:100,63:$VI,66:$VJ},o($V31,[2,59]),o($V31,[2,60]),o($VZ,[2,58]),{68:[1,195]},{68:[2,196]},o($V_,[2,159]),{21:199,26:80,43:201,44:206,52:$Vw,79:200,81:202,101:196,118:$Vx,119:$Vy,121:$Vz,136:$V41,137:$V51,138:204,139:205,140:$Vv,141:$VS,142:197,143:198,144:$V61},o($VA,[2,150]),o($V71,[2,151]),o($V71,[2,152]),o($V71,[2,153]),o($V71,[2,154]),o($V71,[2,155]),o($V71,[2,156]),o($V81,[2,80]),o($VA,[2,157]),o($VA,[2,162]),{70:[1,209]},{70:[2,164]},{70:[2,165]},{70:[2,166],89:[1,210]},{135:[1,211],136:[1,212]},{70:[2,169]},{70:[2,170]},o($V81,[2,81]),o($V01,[2,113]),{26:80,36:[2,116],43:122,71:121,72:$VM,73:$VN,103:213,104:120,118:$Vx,119:$Vy,121:$Vz},{21:218,26:225,43:220,44:206,52:$Vw,63:$VL,74:214,75:215,76:216,77:217,79:219,80:221,81:222,82:223,83:224,84:226,87:$V91,115:$Va1,116:$Vb1,118:$Vx,119:$Vy,121:$Vz,123:$Vc1,136:$V41,137:$V51,138:204,139:205,140:$Vv,141:$VS},{68:[2,63]},{68:[2,64]},o($Vp,[2,30]),{36:[2,9]},o($V01,[2,33]),{26:80,35:$VR,36:[1,231],39:232,41:136,43:137,44:138,118:$Vx,119:$Vy,121:$Vz,141:$VS},o($Vd1,[2,36]),o($V01,[2,35]),o($VV,[2,96]),o($V21,[2,106]),o($V21,[2,108]),o($VW,[2,100],{99:188,64:$VX}),o($V21,[2,109]),{21:199,26:80,43:201,44:206,52:$Vw,79:200,81:202,101:233,118:$Vx,119:$Vy,121:$Vz,136:$V41,137:$V51,138:204,139:205,140:$Vv,141:$VS,142:197,143:198,144:$V61},o($Vq,[2,47]),o($VZ,[2,56]),{69:[1,234]},{126:[1,235]},o($Ve1,[2,191]),o($Ve1,[2,192]),o($Ve1,[2,183]),o($Ve1,[2,184]),o($Ve1,[2,185]),o($Ve1,[2,189]),o($Ve1,[2,190]),o($Vf1,[2,186]),o($Vf1,[2,187]),o($Vf1,[2,188]),o($Vf1,[2,172]),o($Vf1,[2,173]),o($VA,[2,163]),{136:[1,236]},{89:[1,237]},{135:[1,238]},{36:[2,117]},o($Vg1,[2,119],{51:[1,240],105:[1,239]}),o($Vh1,[2,65]),o($Vh1,[2,67],{138:204,139:205,44:206,21:218,79:219,43:220,80:221,81:222,82:223,83:224,26:225,84:226,77:241,78:242,52:$Vw,63:$VL,72:$Vi1,73:$Vj1,87:$V91,89:$Vk1,90:$Vl1,91:$Vm1,115:$Va1,116:$Vb1,118:$Vx,119:$Vy,121:$Vz,123:$Vc1,136:$V41,137:$V51,140:$Vv,141:$VS}),o($Vn1,[2,68]),o($Vn1,[2,71]),o($Vn1,[2,72]),o($Vn1,[2,73]),o($Vn1,[2,74]),o($Vn1,[2,75]),o($Vn1,[2,76]),o($Vn1,[2,77]),o($Vn1,$VU,{66:$V$}),{21:218,26:251,43:220,44:206,52:$Vw,63:$VL,70:[1,248],76:250,77:217,79:219,80:221,81:222,82:223,83:224,84:226,85:249,87:$V91,115:$Va1,116:$Vb1,118:$Vx,119:$Vy,121:$Vz,123:$Vc1,136:$V41,137:$V51,138:204,139:205,140:$Vv,141:$VS},o($Vn1,[2,177]),o($Vn1,[2,178]),o($Vn1,[2,179]),{44:206,70:[1,252],81:254,88:253,136:$V41,137:$V51,138:204,139:205,141:$VS},o($V01,[2,34]),o($Vd1,[2,37]),{70:[1,255]},{70:[1,256]},o($VA,[2,149]),{70:[2,167]},{136:[1,257]},{70:[2,171]},o($Vg1,[2,118]),{21:218,26:225,43:220,44:206,52:$Vw,63:$VL,75:258,76:216,77:217,79:219,80:221,81:222,82:223,83:224,84:226,87:$V91,115:$Va1,116:$Vb1,118:$Vx,119:$Vy,121:$Vz,123:$Vc1,136:$V41,137:$V51,138:204,139:205,140:$Vv,141:$VS},o($Vn1,[2,69]),{21:218,26:225,43:220,44:206,52:$Vw,63:$VL,77:259,79:219,80:221,81:222,82:223,83:224,84:226,87:$V91,115:$Va1,116:$Vb1,118:$Vx,119:$Vy,121:$Vz,123:$Vc1,136:$V41,137:$V51,138:204,139:205,140:$Vv,141:$VS},o($Vo1,[2,89]),o($Vo1,[2,90]),o($Vo1,[2,91]),o($Vo1,[2,92]),o($Vo1,[2,93]),o($Vn1,[2,78]),{51:[1,261],70:[1,260]},o($Vp1,[2,82],{138:204,139:205,44:206,21:218,79:219,43:220,80:221,81:222,82:223,83:224,26:225,84:226,77:241,78:242,52:$Vw,63:$VL,72:$Vi1,73:$Vj1,87:$V91,89:$Vk1,90:$Vl1,91:$Vm1,115:$Va1,116:$Vb1,118:$Vx,119:$Vy,121:$Vz,123:$Vc1,136:$V41,137:$V51,140:$Vv,141:$VS}),o([51,52,63,70,72,73,87,89,90,91,115,116,118,119,121,123,136,137,140,141],$VU,{66:$V$,86:[1,262]}),o($Vn1,[2,85]),{70:[1,263],72:$Vi1,73:$Vj1,78:264,89:$Vk1,90:$Vl1,91:$Vm1},o($Vq1,[2,87]),o($V21,[2,110]),o($VZ,[2,61]),{70:[2,168]},o($Vh1,[2,66]),o($Vn1,[2,70]),o($Vn1,[2,79]),{21:218,26:225,43:220,44:206,52:$Vw,63:$VL,76:265,77:217,79:219,80:221,81:222,82:223,83:224,84:226,87:$V91,115:$Va1,116:$Vb1,118:$Vx,119:$Vy,121:$Vz,123:$Vc1,136:$V41,137:$V51,138:204,139:205,140:$Vv,141:$VS},{44:206,81:266,136:$V41,137:$V51,138:204,139:205,141:$VS},o($Vn1,[2,86]),{44:206,81:267,136:$V41,137:$V51,138:204,139:205,141:$VS},o($Vp1,[2,83],{138:204,139:205,44:206,21:218,79:219,43:220,80:221,81:222,82:223,83:224,26:225,84:226,77:241,78:242,52:$Vw,63:$VL,72:$Vi1,73:$Vj1,87:$V91,89:$Vk1,90:$Vl1,91:$Vm1,115:$Va1,116:$Vb1,118:$Vx,119:$Vy,121:$Vz,123:$Vc1,136:$V41,137:$V51,140:$Vv,141:$VS}),o($Vp1,[2,84]),o($Vq1,[2,88])],
defaultActions: {13:[2,15],14:[2,16],15:[2,17],25:[2,26],26:[2,27],27:[2,28],50:[2,1],51:[2,3],66:[2,18],72:[2,21],82:[2,29],122:[2,62],132:[2,20],133:[2,22],137:[2,40],138:[2,41],155:[2,196],169:[2,164],170:[2,165],173:[2,169],174:[2,170],179:[2,63],180:[2,64],182:[2,9],213:[2,117],236:[2,167],238:[2,171],257:[2,168]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        function _parseError (msg, hash) {
            this.message = msg;
            this.hash = hash;
        }
        _parseError.prototype = Error;

        throw new _parseError(str, hash);
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

      const
    AT_RULE = "AT_RULE",

    MEDIA_QUERIES = "MEDIA_QUERIES",
    MEDIA_QUERY = "MEDIA_QUERY",
    MEDIA_QUERY_EXPR = "MEDIA_QUERY_EXPR",

    FONT_FACE = "FONT_FACE",

    /*
     * Ref: [1] https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Selectors 
     */
    SELECTOR = "SELECTOR",
    TYPE_SELECTOR = "TYPE_SELECTOR",
    CLASS_SELECTOR = "CLASS_SELECTOR",
    ID_SELECTOR = "ID_SELECTOR",
    UNIVERSAL_SELECTOR = "UNIVERSAL_SELECTOR",
    ATTR_SELECTOR = "ATTR_SELECTOR",
    ATTR_OPERATOR = "ATTR_OPERATOR",
    PSEUDO_CLASS = "PSEUDO_CLASS",
    PSEUDO_ELEMENT = "PSEUDO_ELEMENT",
    SELECTOR_COMBINATOR = "SELECTOR_COMBINATOR",

    CSS_RULE = "CSS_RULE",
    DECLARATIONS = "DECLARATIONS",
    DECLARATION = "DECLARATION",

    ATTRIBUTE = "ATTRIBUTE",

    CALC_OPERATION = "CALC_OPERATION",
    EXPRESSION = "EXPRESSION",

    MEDIA_TYPE = "MEDIA_TYPE",

    KEYFRAMES_BLOCK = "KEYFRAMES_BLOCK",

    FUNCTIONS = "FUNCTIONS",
    FUNCTION = "FUNCTION",

    SEQUENCE = "SEQUENCE",
    DIMENSION = "DIMENSION",

    PERCENTAGE = "PERCENTAGE",
    NUMBER = "NUMBER",

    EndOfList = ''

  const keyframesVal = function(selector, val) {
    return {
      type: KEYFRAMES_BLOCK,
      selector: selector,
      value: val
    }
  }

  const urlVal = function(val) {
    return {
      type: 'URL',
      value: val
    }
  }

  const numberVal = function(val) {
    return {
      type: 'NUMBER',
      value: parseFloat(val)
    }
  }

  const stringVal = function(val) {
    return {
      type: 'STRING',
      value: val
    }
  }

  const hashVal = function(val) {
    return {
      type: 'HASH',
      value: val
    }
  }

  const operationVal = function(operator, lhs, rhs) {
    return {
      type: CALC_OPERATION,
      lhs: lhs,
      operator: operator,
      rhs: rhs
    }
  }
  const functionVal = function(name, parameters) {
    var value = {
      type: FUNCTION,
      name: name
    }

    if (parameters) {
      value.parameters = parameters
    }

    return value
  }

  const defVariable = function(type, value) {
    // console.log('defVariable\t=', type, value)
    return {
      type: type,
      value: value
    }
  }

  const selectorComponent = function(selectorType, value, combinator) {
    var component = defVariable(selectorType, (typeof(value) == 'string')? value.trimRight(): value)

    if (combinator) {
      return merge(component, combinator)
    }

    return component
  }
  
  const selectorCombinator = function(combinatorType, value) {
    return {
      type: SELECTOR_COMBINATOR,
      value: defVariable(combinatorType, value)
    }
  }

  const removeTailingSelectorCombinator = function(list) {
    if (list.length > 0) {
      var lastItem = list[list.length - 1]

      if (lastItem.type == SELECTOR_COMBINATOR) {
        list.pop()
        return list
      }
    }

    return list
  }

  const atRule = function(rule, value, optKey, optVal) {
    // console.log('atRule\t\t = ', rule, value, optKey, optVal)
    var ruleValue = {
      type: AT_RULE,
      rule: rule
    }

    if (value) {
      ruleValue.value = value
    }
    if (optKey) {
      ruleValue[optKey] = optVal
    }

    return ruleValue
  }

  const mediaQuery = function(operator, mediaType, expressions) {
    // console.log('mediaQuery\t = ', operator, mediaType, JSON.stringify(expression))
    var mediaQueryValue = {
      type: MEDIA_TYPE
    }

    if (operator) {
      mediaQueryValue.operator = operator
    }
    if (mediaType) {
      mediaQueryValue.value = mediaType
    }
    if (expressions) {
      mediaQueryValue.expressions = expressions
    }

    return defVariable(MEDIA_QUERY, mediaQueryValue)
  }

  const mediaQueryExpr = function(feature, value) {
    var mediaQueryValue = {
      type: MEDIA_QUERY_EXPR
    }
    if (feature) {
      mediaQueryValue.feature = feature
    }
    if (value) {
      mediaQueryValue.value = value
    }

    return mediaQueryValue
  }

  const addProp = function(o, prop, value) {
    if (prop in o) {
      throw new Error('Object already has property: ' + prop)
    }
    
    if (value) {
      o[prop] = value
    }

    return o
  }

  const addComment = function(o, comment) {
    return addProp(o, 'comment', comment)
  }

  const declarations = function(value) {
    var cssDeclarations = {
      type: DECLARATIONS,
      value: value
    }

    return cssDeclarations
  }

  const cssDeclarationVal = function(property, value, important) {
    var cssDeclarationValue = {
      type: DECLARATION,
      property: property,
      value: value
    }

    if (important) {
      cssDeclarationValue.important = true
    }

    return cssDeclarationValue
  }

  const merge = function(lVal, rVal) {
    // console.log('lVal = (' + typeof(lVal) + ')' + JSON.stringify(lVal), 'rVal = (' + typeof(rVal) + ')' + JSON.stringify(rVal))

    if (!(lVal instanceof(Array))) {
      lVal = [lVal]
    }
    if (!(rVal instanceof(Array))) {
      rVal = [rVal]
    }

    return lVal.concat(rVal)
  }

  const join = function(list, key, separator) {
    var result = []
    separator = separator || ''

    if (key) {
      for (var k in list) {
        var it = list[k]

        if (key in it) {
          result.push(it[key])
        } else {
          throw new Error('No such key in the list')
        }
      }
    } else {
      result = list
    }

    return result.join(separator)
  }

  const sequencialVal = function(list) {
    if (list.length > 1)
      return {
        type: SEQUENCE,
        value: list
      }

    return list
  }

  const vendorPrefixIdVal = function(val) {
    const identPattern = /([-](webkit|moz|o|ms)[-])([0-9a-zA-Z-]*)/
    var result = val.match(identPattern)

    if (result) {
      return {
        type: 'ID',
        vendorPrefix: result[1],
        value: result[3]
      }
    }

    return {
      type: 'ID',
      value: val
    }
  }

  const unitVal = function(type, val) {
    const pattern = /(([\+\-]?[0-9]+(\.[0-9]+)?)|([\+\-]?\.[0-9]+))([a-zA-Z]+)/
    var result = val.match(pattern)

    if (result) {
      return {
        type: type,
        value: parseFloat(result[1]),
        unit: result[5]
      }
    }

    return {
      type: type,
      value: val
    }
  }

  const dimensionUnitVal = function(val) {
    return unitVal(DIMENSION, val)
  }

  const percentageVal = function(val) {
    const pattern = /(([\+\-]?[0-9]+(\.[0-9]+)?)|([\+\-]?\.[0-9]+))([%])/
    var result = val.match(pattern)

    if (result) {
      return {
        type: PERCENTAGE,
        value: parseFloat(result[1]),
        unit: result[5]
      }
    }

    return {
      type: PERCENTAGE,
      value: val
    }
  }
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:function _token(tok) { /*console.log(tok);*/ return tok; }
break;
case 1:
break;
case 2:
break;
case 3:return _token('VENDOR_PREFIX_IDENT');
break;
case 4:return _token('CALC_FUNC');
break;
case 5:return _token('URL_FUNC');
break;
case 6:return _token('URL_PREFIX_FUNC');
break;
case 7:return _token('DOMAIN_FUNC');
break;
case 8:return _token('REGEXP_FUNC');
break;
case 9:return _token('AT_CHARSET');
break;
case 10:return _token('AT_IMPORT');
break;
case 11:return _token('AT_NAMESPACE');
break;
case 12:return _token('AT_MEDIA');
break;
case 13:return _token('AT_DOCUMENT');
break;
case 14:return _token('AT_PAGE');
break;
case 15:return _token('AT_SUPPORTS');
break;
case 16:return _token('AT_FONT_FACE');
break;
case 17:return _token('AT_VIEWPORT');
break;
case 18:return _token('AT_COUNTER_STYLE');
break;
case 19:return _token('AT_FONT_FEATURE_VALUES');
break;
case 20:return _token('AT_KEYFRAMES');
break;
case 21:return _token('AT_KEYWORD');
break;
case 22:return _token('SELECTOR_CLASS_WITH_WHITESPACE');
break;
case 23:return _token('SELECTOR_ID_WITH_WHITESPACE');
break;
case 24:return _token('HASH_STRING');
break;
case 25:return _token('HEXA_NUMBER');
break;
case 26:return _token('DIMENSION');
break;
case 27:return _token('PERCENTAGE');
break;
case 28:return _token('NUMBER');
break;
case 29:return _token('UNICODE_RANGE');
break;
case 30:return _token('GENERAL_IDENT');
break;
case 31:return _token('INCLUDE_MATCH');
break;
case 32:return _token('DASH_MATCH');
break;
case 33:return _token('PREFIX_MATCH');
break;
case 34:return _token('SUFFIX_MATCH');
break;
case 35:return _token('SUBSTRING_MATCH');
break;
case 36:return _token('COLUMN');
break;
case 37:return _token('CDO');
break;
case 38:return _token('CDC');
break;
case 39:return _token('ASSIGN_MARK');
break;
case 40:return _token('QUOTATION_MARK');
break;
case 41:return _token('NUMBER_SIGN');
break;
case 42:return _token('DOLLAR_SIGN');
break;
case 43:return _token('APOSTROPHE');
break;
case 44:return _token('LEFT_PARENTHESIS');
break;
case 45:return _token('RIGHT_PARENTHESIS');
break;
case 46:return _token('ASTERISK_WITH_WHITESPACE');
break;
case 47:return _token('ASTERISK');
break;
case 48:return _token('PLUS_SIGN');
break;
case 49:return _token('COMMA');
break;
case 50:return _token('HYPHEN_MINUS');
break;
case 51:return _token('FULL_STOP');
break;
case 52:return _token('SOLIDUS');
break;
case 53:return _token('COLON');
break;
case 54:return _token('SEMICOLON');
break;
case 55:return _token('LESS_THAN_SIGN');
break;
case 56:return _token('GREATER_THAN_SIGN');
break;
case 57:return _token('COMMERCIAL_AT');
break;
case 58:return _token('LEFT_SQUARE_BRACKET');
break;
case 59:return _token('REVERSE_SOLIDUS');
break;
case 60:return _token('RIGHT_SQUARE_BRACKET');
break;
case 61:return _token('CIRCUMFLEX_ACCENT');
break;
case 62:return _token('LEFT_CURLY_BRACKET');
break;
case 63:return _token('RIGHT_CURLY_BRACKET');
break;
case 64:return _token('VERTICAL_LINE ');
break;
case 65:return _token('TILDE');
break;
case 66:return _token('GENERAL_IDENT');
break;
case 67:return _token('GENERAL_IDENT');
break;
case 68:return _token('GENERAL_IDENT');
break;
case 69:return _token('OPERATOR_AND');
break;
case 70:return _token('OPERATOR_OR');
break;
case 71:return _token('OPERATOR_ONLY');
break;
case 72:return _token('OPERATOR_NOT');
break;
case 73:return _token('STRING');
break;
case 74:return _token('GENERAL_IDENT');
break;
case 75:return _token('N');
break;
case 76:return _token('SELECTOR_TYPE_WITH_WHITESPACE');
break;
case 77:return _token('GENERAL_IDENT');
break;
case 78:return _token('IMPORTANT');
break;
case 79:return _token('EOF');
break;
case 80:return _token(yy_.yytext);
break;
}
},
rules: [/^(?:{hack})/,/^(?:\/\*[^*]*\*+([^\/][^*]*\*+)*\/)/,/^(?:(\s)+)/,/^(?:([-](webkit|moz|o|ms\b)[-])([-]?([a-zA-Z]|([\200-\377])|((\\{h}{1,6}[ \t\r\n\f]?)|\\[ -~\200-\377]))([_]|([a-zA-Z0-9-]|([\200-\377])|((\\{h}{1,6}[ \t\r\n\f]?)|\\[ -~\200-\377])))*))/,/^(?:calc\()/,/^(?:url(\(((\s))*((([!#$%&*-~]|([\200-\377])|((\\{h}{1,6}[ \t\r\n\f]?)|\\[ -~\200-\377]))*)|(("([\t !#$%&(-~]|\\{nl}|'|([\200-\377])|((\\{h}{1,6}[ \t\r\n\f]?)|\\[ -~\200-\377]))*")|('([\t !#$%&(-~]|\\{nl}|"|([\200-\377])|((\\{h}{1,6}[ \t\r\n\f]?)|\\[ -~\200-\377]))*')))((\s))*\)))/,/^(?:url-prefix(\(((\s))*((([!#$%&*-~]|([\200-\377])|((\\{h}{1,6}[ \t\r\n\f]?)|\\[ -~\200-\377]))*)|(("([\t !#$%&(-~]|\\{nl}|'|([\200-\377])|((\\{h}{1,6}[ \t\r\n\f]?)|\\[ -~\200-\377]))*")|('([\t !#$%&(-~]|\\{nl}|"|([\200-\377])|((\\{h}{1,6}[ \t\r\n\f]?)|\\[ -~\200-\377]))*')))((\s))*\)))/,/^(?:domain(\(((\s))*((([!#$%&*-~]|([\200-\377])|((\\{h}{1,6}[ \t\r\n\f]?)|\\[ -~\200-\377]))*)|(("([\t !#$%&(-~]|\\{nl}|'|([\200-\377])|((\\{h}{1,6}[ \t\r\n\f]?)|\\[ -~\200-\377]))*")|('([\t !#$%&(-~]|\\{nl}|"|([\200-\377])|((\\{h}{1,6}[ \t\r\n\f]?)|\\[ -~\200-\377]))*')))((\s))*\)))/,/^(?:regexp\(((\s))*(("([\t !#$%&(-~]|\\{nl}|'|([\200-\377])|((\\{h}{1,6}[ \t\r\n\f]?)|\\[ -~\200-\377]))*")|('([\t !#$%&(-~]|\\{nl}|"|([\200-\377])|((\\{h}{1,6}[ \t\r\n\f]?)|\\[ -~\200-\377]))*'))((\s))*\))/,/^(?:@charset\b)/,/^(?:@import\b)/,/^(?:@namespace\b)/,/^(?:@media\b)/,/^(?:@document\b)/,/^(?:@page\b)/,/^(?:@supports\b)/,/^(?:@font-face\b)/,/^(?:@viewport\b)/,/^(?:@counter-style\b)/,/^(?:@font-feature-values\b)/,/^(?:@([-](webkit|moz|o|ms\b)[-])?keyframes\b)/,/^(?:[@]([-]?([a-zA-Z]|([\200-\377])|((\\{h}{1,6}[ \t\r\n\f]?)|\\[ -~\200-\377]))([_]|([a-zA-Z0-9-]|([\200-\377])|((\\{h}{1,6}[ \t\r\n\f]?)|\\[ -~\200-\377])))*))/,/^(?:[.]([-]?([a-zA-Z]|([\200-\377])|((\\{h}{1,6}[ \t\r\n\f]?)|\\[ -~\200-\377]))([_]|([a-zA-Z0-9-]|([\200-\377])|((\\{h}{1,6}[ \t\r\n\f]?)|\\[ -~\200-\377])))*)(\s)+)/,/^(?:[#]([-]?([a-zA-Z]|([\200-\377])|((\\{h}{1,6}[ \t\r\n\f]?)|\\[ -~\200-\377]))([_]|([a-zA-Z0-9-]|([\200-\377])|((\\{h}{1,6}[ \t\r\n\f]?)|\\[ -~\200-\377])))*)(\s)+)/,/^(?:[#]([-]?([a-zA-Z]|([\200-\377])|((\\{h}{1,6}[ \t\r\n\f]?)|\\[ -~\200-\377]))([_]|([a-zA-Z0-9-]|([\200-\377])|((\\{h}{1,6}[ \t\r\n\f]?)|\\[ -~\200-\377])))*))/,/^(?:[#]([0-9a-fA-F])+)/,/^(?:(([\+\-]?[0-9]+(\.[0-9]+)?)|([\+\-]?\.[0-9]+))([-]?([a-zA-Z]|([\200-\377])|((\\{h}{1,6}[ \t\r\n\f]?)|\\[ -~\200-\377]))([_]|([a-zA-Z0-9-]|([\200-\377])|((\\{h}{1,6}[ \t\r\n\f]?)|\\[ -~\200-\377])))*))/,/^(?:(([\+\-]?[0-9]+(\.[0-9]+)?)|([\+\-]?\.[0-9]+))%)/,/^(?:(([\+\-]?[0-9]+(\.[0-9]+)?)|([\+\-]?\.[0-9]+)))/,/^(?:[Uu]\+(\?{1,6}|{h}(\?{0,5}|{h}(\?{0,4}|{h}(\?{0,3}|{h}(\?{0,2}|{h}(\??|{h})))))))/,/^(?:-([-]?([a-zA-Z]|([\200-\377])|((\\{h}{1,6}[ \t\r\n\f]?)|\\[ -~\200-\377]))([_]|([a-zA-Z0-9-]|([\200-\377])|((\\{h}{1,6}[ \t\r\n\f]?)|\\[ -~\200-\377])))*))/,/^(?:~=)/,/^(?:\|=)/,/^(?:\^=)/,/^(?:\$=)/,/^(?:\*=)/,/^(?:\|\|)/,/^(?:<!--)/,/^(?:-->)/,/^(?:=)/,/^(?:\\)/,/^(?:#)/,/^(?:\$)/,/^(?:‘)/,/^(?:\()/,/^(?:\))/,/^(?:[*](\s)+)/,/^(?:[*])/,/^(?:\+)/,/^(?:,)/,/^(?:-)/,/^(?:\.)/,/^(?:\/)/,/^(?::)/,/^(?:;)/,/^(?:<)/,/^(?:>)/,/^(?:@)/,/^(?:\[)/,/^(?:\\)/,/^(?:\])/,/^(?:\^)/,/^(?:\{)/,/^(?:\})/,/^(?:\|)/,/^(?:~)/,/^(?:((and\b)|(or\b)|(only\b)|(not\b))([_]|([a-zA-Z0-9-]|([\200-\377])|((\\{h}{1,6}[ \t\r\n\f]?)|\\[ -~\200-\377])))+)/,/^(?:{media_type}([_]|([a-zA-Z0-9-]|([\200-\377])|((\\{h}{1,6}[ \t\r\n\f]?)|\\[ -~\200-\377])))+)/,/^(?:{media_feature}([_]|([a-zA-Z0-9-]|([\200-\377])|((\\{h}{1,6}[ \t\r\n\f]?)|\\[ -~\200-\377])))+)/,/^(?:(and\b))/,/^(?:(or\b))/,/^(?:(only\b))/,/^(?:(not\b))/,/^(?:(("([\t !#$%&(-~]|\\{nl}|'|([\200-\377])|((\\{h}{1,6}[ \t\r\n\f]?)|\\[ -~\200-\377]))*")|('([\t !#$%&(-~]|\\{nl}|"|([\200-\377])|((\\{h}{1,6}[ \t\r\n\f]?)|\\[ -~\200-\377]))*')))/,/^(?:n([-]?([a-zA-Z]|([\200-\377])|((\\{h}{1,6}[ \t\r\n\f]?)|\\[ -~\200-\377]))([_]|([a-zA-Z0-9-]|([\200-\377])|((\\{h}{1,6}[ \t\r\n\f]?)|\\[ -~\200-\377])))*))/,/^(?:n\b)/,/^(?:([-]?([a-zA-Z]|([\200-\377])|((\\{h}{1,6}[ \t\r\n\f]?)|\\[ -~\200-\377]))([_]|([a-zA-Z0-9-]|([\200-\377])|((\\{h}{1,6}[ \t\r\n\f]?)|\\[ -~\200-\377])))*)(\s)+)/,/^(?:([-]?([a-zA-Z]|([\200-\377])|((\\{h}{1,6}[ \t\r\n\f]?)|\\[ -~\200-\377]))([_]|([a-zA-Z0-9-]|([\200-\377])|((\\{h}{1,6}[ \t\r\n\f]?)|\\[ -~\200-\377])))*))/,/^(?:!important\b)/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = cssparser;
exports.Parser = cssparser.Parser;
exports.parse = function () { return cssparser.parse.apply(cssparser, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}